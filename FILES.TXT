[
  {
    "path": "src/app/blog/page.tsx",
    "content": "import { Metadata } from 'next';\nimport { getPaginatedPosts, getAllCategories, getAllTags } from '@/lib/blog';\nimport BlogCard from '@/components/Blog/BlogCard';\nimport BlogSearch from '@/components/Blog/BlogSearch';\nimport Pagination from '@/components/Blog/Pagination';\nimport { generateBlogSchema, generateBlogListSchema } from '@/lib/generateSchemas';\nimport Link from 'next/link';\n\nexport const metadata: Metadata = {\n  title: 'Nail Care Blog - Expert Tips, Trends & Tutorials | Mirelle',\n  description: 'Discover 100+ expert nail care articles, seasonal trends, step-by-step tutorials, and professional manicure tips. Your ultimate guide to beautiful, healthy nails.',\n  keywords: 'nail care blog, nail tips 2025, nail trends, nail art tutorials, manicure tips, nail health, professional nail care, seasonal nail designs, nail inspiration, beauty blog',\n  authors: [{ name: 'Mirelle' }],\n  creator: 'Mirelle',\n  publisher: 'Mirelle',\n  alternates: {\n    canonical: 'https://mirelleinspo.com/blog',\n  },\n  robots: {\n    index: true,\n    follow: true,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-video-preview': -1,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n    },\n  },\n  openGraph: {\n    title: 'Nail Care Blog - Expert Tips, Trends & Tutorials | Mirelle',\n    description: 'Discover expert nail care articles, seasonal trends, and step-by-step tutorials. Your ultimate guide to beautiful, healthy nails.',\n    type: 'website',\n    url: 'https://mirelleinspo.com/blog',\n    siteName: 'Mirelle',\n    locale: 'en_US',\n    images: [{\n      url: 'https://mirelleinspo.com/blog-hero.jpg',\n      width: 1200,\n      height: 630,\n      alt: 'Mirelle Nail Care Blog',\n      type: 'image/jpeg',\n    }],\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Nail Care Blog | Mirelle',\n    description: 'Expert nail care articles, trends & tutorials',\n    images: ['https://mirelleinspo.com/blog-hero.jpg'],\n    creator: '@mirelleinspo',\n    site: '@mirelleinspo',\n  },\n};\n\ninterface PageProps {\n  searchParams: {\n    page?: string;\n  };\n}\n\nexport default async function BlogPage({ searchParams }: PageProps) {\n  const currentPage = Number(searchParams.page) || 1;\n  const { posts, totalPages, totalPosts } = await getPaginatedPosts(currentPage, 12);\n  \n  // \u2705 NEW: Get categories and tags for sidebar/filters\n  const categories = await getAllCategories();\n  const tags = await getAllTags();\n  \n  const baseUrl = 'https://mirelleinspo.com';\n\n  const blogSchema = generateBlogSchema();\n  const itemListSchema = generateBlogListSchema(posts);\n\n  const breadcrumbSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: [\n      {\n        '@type': 'ListItem',\n        position: 1,\n        name: 'Home',\n        item: 'https://mirelleinspo.com',\n      },\n      {\n        '@type': 'ListItem',\n        position: 2,\n        name: 'Blog',\n        item: 'https://mirelleinspo.com/blog',\n      },\n    ],\n  };\n\n  return (\n    <>\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(blogSchema) }}\n      />\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(itemListSchema) }}\n      />\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbSchema) }}\n      />\n\n      <div className=\"min-h-screen\">\n        {/* Hero Section */}\n        <section className=\"relative bg-gradient-to-r from-pink-200 to-purple-200 py-20\">\n          <div className=\"container mx-auto px-4 text-center\">\n            <h1 className=\"text-5xl font-bold text-gray-800 mb-4\">\n              Nail Care Blog - Expert Tips & Trends\n            </h1>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Discover professional nail care advice, seasonal trends, and step-by-step tutorials for beautiful, healthy nails\n            </p>\n            \n            <div className=\"flex flex-wrap justify-center gap-6 mt-8\">\n              <div className=\"flex items-center gap-2 text-gray-700\">\n                <span className=\"text-2xl\">\ud83d\udcdd</span>\n                <span className=\"font-semibold\">{totalPosts}+ Articles</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-gray-700\">\n                <span className=\"text-2xl\">\u2728</span>\n                <span className=\"font-semibold\">Expert Advice</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-gray-700\">\n                <span className=\"text-2xl\">\ud83d\udcc6</span>\n                <span className=\"font-semibold\">Updated Weekly</span>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* \u2705 NEW: Search Section */}\n        <section className=\"bg-white py-8 border-b\">\n          <div className=\"container mx-auto px-4\">\n            <BlogSearch posts={posts} /> \n          </div>\n        </section>\n\n        {/* Main Content with Sidebar */}\n        <section className=\"py-16 bg-white\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n              {/* \u2705 NEW: Sidebar with Categories and Tags */}\n              <aside className=\"lg:col-span-1 space-y-8\">\n                {/* Categories */}\n                <div className=\"bg-gray-50 rounded-lg p-6\">\n                  <h3 className=\"text-xl font-bold text-gray-800 mb-4\">Categories</h3>\n                  <div className=\"space-y-2\">\n                    {categories.slice(0, 8).map((category) => (\n                      <Link\n                        key={category.slug}\n                        href={`/blog/category/${category.slug}`}\n                        className=\"flex items-center justify-between p-2 rounded hover:bg-white transition-colors\"\n                      >\n                        <span className=\"text-gray-700\">{category.name}</span>\n                        <span className=\"text-sm text-gray-500 bg-white px-2 py-1 rounded\">\n                          {category.count}\n                        </span>\n                      </Link>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Popular Tags */}\n                <div className=\"bg-gray-50 rounded-lg p-6\">\n                  <h3 className=\"text-xl font-bold text-gray-800 mb-4\">Popular Tags</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {tags.slice(0, 15).map((tag) => (\n                      <Link\n                        key={tag.slug}\n                        href={`/blog/tag/${tag.slug}`}\n                        className=\"text-sm bg-white text-gray-700 px-3 py-1 rounded-full hover:bg-pink-100 transition-colors\"\n                      >\n                        {tag.name} ({tag.count})\n                      </Link>\n                    ))}\n                  </div>\n                </div>\n              </aside>\n\n              {/* Blog Grid */}\n              <div className=\"lg:col-span-3\">\n                <div className=\"mb-8\">\n                  <h2 className=\"text-3xl font-bold text-gray-800 mb-2\">\n                    Latest Articles\n                  </h2>\n                  <p className=\"text-gray-600\">\n                    Page {currentPage} of {totalPages} \u2022 {totalPosts} total articles\n                  </p>\n                </div>\n\n                {posts.length > 0 ? (\n                  <>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                      {posts.map((post) => (\n                        <BlogCard key={post.slug} post={post} />\n                      ))}\n                    </div>\n\n                    {/* \u2705 NEW: Pagination Component */}\n                    {totalPages > 1 && (\n                      <Pagination\n                        currentPage={currentPage}\n                        totalPages={totalPages}\n                        baseUrl=\"/blog\"\n                      />\n                    )}\n                  </>\n                ) : (\n                  <div className=\"text-center py-16\">\n                    <h3 className=\"text-2xl font-bold text-gray-600 mb-4\">\n                      Amazing Content Coming Soon\n                    </h3>\n                    <p className=\"text-gray-500\">\n                      We're crafting expert nail care content for you. Check back soon!\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Categories Section - Simplified */}\n        <section className=\"py-16 bg-gray-50\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-800\">\n              Explore by Topic\n            </h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n              {categories.slice(0, 8).map((category) => (\n                <Link\n                  key={category.slug}\n                  href={`/blog/category/${category.slug}`}\n                  className=\"bg-white p-6 rounded-lg text-center hover:shadow-lg transition-shadow\"\n                >\n                  <div className=\"text-4xl mb-2\">\ud83d\udc85</div>\n                  <h3 className=\"font-semibold text-gray-800 mb-1\">{category.name}</h3>\n                  <p className=\"text-sm text-gray-500\">{category.count} articles</p>\n                </Link>\n              ))}\n            </div>\n          </div>\n        </section>\n      </div>\n    </>\n  );\n}\n"
  },
  {
    "path": "src/app/blog/category/[category]/page.tsx",
    "content": "import { Metadata } from 'next';\nimport { notFound } from 'next/navigation';\nimport { getPostsByCategory, getAllCategories } from '@/lib/blog';\nimport BlogCard from '@/components/Blog/BlogCard';\nimport Breadcrumbs from '@/components/Breadcrumbs';\n\ninterface PageProps {\n  params: {\n    category: string;\n  };\n  searchParams: {\n    page?: string;\n  };\n}\n\n// \u2705 Generate static params for all categories\nexport async function generateStaticParams() {\n  const categories = await getAllCategories();\n  return categories.map((category) => ({\n    category: category.name, // \u2705 FIXED: Changed from category.slug to category.name\n  }));\n}\n\n// \u2705 Generate metadata for category pages\nexport async function generateMetadata({ params }: PageProps): Promise<Metadata> {\n  const { category } = params;\n  const posts = await getPostsByCategory(category);\n  const categories = await getAllCategories();\n  const categoryData = categories.find(cat => cat.name === category); // \u2705 FIXED: Changed from cat.slug to cat.name\n\n  if (!categoryData || posts.length === 0) {\n    return {\n      title: 'Category Not Found - Mirelle',\n      description: 'The category you are looking for does not exist.',\n      robots: {\n        index: false,\n        follow: false,\n      },\n    };\n  }\n\n  const canonicalUrl = `https://mirelleinspo.com/blog/category/${category}`;\n  \n  return {\n    title: `${categoryData.name} - Nail Care Articles | Mirelle`,\n    description: `Explore ${posts.length} expert articles about ${categoryData.name}. Professional nail care tips, trends, and tutorials curated by Mirelle.`, // \u2705 FIXED: Removed categoryData.excerpt\n    keywords: `${categoryData.name}, nail care, nail art, nail trends, ${categoryData.name.toLowerCase()} tips, manicure, beauty blog`,\n    authors: [{ name: 'Mirelle' }],\n    creator: 'Mirelle',\n    publisher: 'Mirelle',\n    alternates: {\n      canonical: canonicalUrl,\n    },\n    robots: {\n      index: true,\n      follow: true,\n      googleBot: {\n        index: true,\n        follow: true,\n        'max-video-preview': -1,\n        'max-image-preview': 'large',\n        'max-snippet': -1,\n      },\n    },\n    openGraph: {\n      title: `${categoryData.name} - Nail Care Articles | Mirelle`,\n      description: `Explore ${posts.length} expert articles about ${categoryData.name}`, // \u2705 FIXED: Removed categoryData.excerpt\n      type: 'website',\n      url: canonicalUrl,\n      siteName: 'Mirelle',\n      locale: 'en_US',\n      images: [{\n        url: 'https://mirelleinspo.com/blog-category.jpg',\n        width: 1200,\n        height: 630,\n        alt: `${categoryData.name} articles on Mirelle`,\n        type: 'image/jpeg',\n      }],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: `${categoryData.name} Articles | Mirelle`,\n      description: `Explore expert ${categoryData.name} articles`, // \u2705 FIXED: Removed categoryData.excerpt\n      images: ['https://mirelleinspo.com/blog-category.jpg'],\n      creator: '@mirelleinspo',\n      site: '@mirelleinspo',\n    },\n  };\n}\n\nexport default async function CategoryPage({ params, searchParams }: PageProps) {\n  const { category } = params;\n  const currentPage = Number(searchParams.page) || 1;\n  const postsPerPage = 12;\n\n  // Get all posts in this category\n  const allPosts = await getPostsByCategory(category);\n  const categories = await getAllCategories();\n  const categoryData = categories.find(cat => cat.name === category); // \u2705 FIXED: Changed from cat.slug to cat.name\n\n  if (!categoryData || allPosts.length === 0) {\n    notFound();\n  }\n\n  // Calculate pagination\n  const totalPages = Math.ceil(allPosts.length / postsPerPage);\n  const startIndex = (currentPage - 1) * postsPerPage;\n  const endIndex = startIndex + postsPerPage;\n  const paginatedPosts = allPosts.slice(startIndex, endIndex);\n\n  // \u2705 Breadcrumb structured data\n  const breadcrumbSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: [\n      {\n        '@type': 'ListItem',\n        position: 1,\n        name: 'Home',\n        item: 'https://mirelleinspo.com',\n      },\n      {\n        '@type': 'ListItem',\n        position: 2,\n        name: 'Blog',\n        item: 'https://mirelleinspo.com/blog',\n      },\n      {\n        '@type': 'ListItem',\n        position: 3,\n        name: categoryData.name,\n        item: `https://mirelleinspo.com/blog/category/${category}`,\n      },\n    ],\n  };\n\n  // \u2705 Collection page structured data\n  const collectionSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'CollectionPage',\n    name: `${categoryData.name} Articles`,\n    description: `Collection of ${allPosts.length} articles about ${categoryData.name}`, // \u2705 FIXED: Removed categoryData.excerpt\n    url: `https://mirelleinspo.com/blog/category/${category}`,\n    about: {\n      '@type': 'Thing',\n      name: categoryData.name,\n    },\n    numberOfItems: allPosts.length,\n  };\n\n  return (\n    <>\n      {/* Structured Data */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbSchema) }}\n      />\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(collectionSchema) }}\n      />\n\n      <div className=\"min-h-screen\">\n        {/* Breadcrumbs */}\n        <Breadcrumbs \n          items={[{ label: 'Blog', href: '/blog' }]} \n          currentPage={categoryData.name}\n        />\n\n        {/* Hero Section */}\n        <section className=\"relative bg-gradient-to-r from-pink-200 to-purple-200 py-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <h1 className=\"text-4xl md:text-5xl font-bold text-gray-800 mb-4\">\n                {categoryData.name}\n              </h1>\n              <p className=\"text-xl text-gray-600 mb-6\">\n                {/* \u2705 FIXED: Removed conditional rendering since excerpt doesn't exist */}\n                Discover expert articles and insights about {categoryData.name}\n              </p>\n              <div className=\"flex items-center justify-center gap-2 text-gray-700\">\n                <span className=\"text-2xl\">\ud83d\udcdd</span>\n                <span className=\"font-semibold\">\n                  {allPosts.length} {allPosts.length === 1 ? 'Article' : 'Articles'}\n                </span>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Posts Grid */}\n        <section className=\"py-16 bg-white\">\n          <div className=\"container mx-auto px-4\">\n            {paginatedPosts.length > 0 ? (\n              <>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n                  {paginatedPosts.map((post) => (\n                    <BlogCard key={post.slug} post={post} />\n                  ))}\n                </div>\n\n                {/* Pagination */}\n                {totalPages > 1 && (\n                  <div className=\"flex justify-center items-center gap-2 mt-12\">\n                    {/* Previous Button */}\n                    {currentPage > 1 && (\n                      <a\n                        href={`/blog/category/${category}?page=${currentPage - 1}`}\n                        className=\"px-4 py-2 bg-pink-600 text-white rounded-lg hover:bg-pink-700 transition-colors\"\n                      >\n                        \u2190 Previous\n                      </a>\n                    )}\n\n                    {/* Page Numbers */}\n                    <div className=\"flex gap-2\">\n                      {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                        <a\n                          key={page}\n                          href={`/blog/category/${category}?page=${page}`}\n                          className={`px-4 py-2 rounded-lg transition-colors ${\n                            page === currentPage\n                              ? 'bg-pink-600 text-white'\n                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                          }`}\n                        >\n                          {page}\n                        </a>\n                      ))}\n                    </div>\n\n                    {/* Next Button */}\n                    {currentPage < totalPages && (\n                      <a\n                        href={`/blog/category/${category}?page=${currentPage + 1}`}\n                        className=\"px-4 py-2 bg-pink-600 text-white rounded-lg hover:bg-pink-700 transition-colors\"\n                      >\n                        Next \u2192\n                      </a>\n                    )}\n                  </div>\n                )}\n              </>\n            ) : (\n              <div className=\"text-center py-16\">\n                <h3 className=\"text-2xl font-bold text-gray-600 mb-4\">\n                  No articles found in this category\n                </h3>\n                <a\n                  href=\"/blog\"\n                  className=\"text-pink-600 hover:text-pink-700 underline\"\n                >\n                  \u2190 Back to all articles\n                </a>\n              </div>\n            )}\n          </div>\n        </section>\n\n        {/* Other Categories Section */}\n        <section className=\"py-16 bg-gray-50\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-800\">\n              Explore Other Categories\n            </h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 max-w-5xl mx-auto\">\n              {categories\n                .filter(cat => cat.name !== category) // \u2705 FIXED: Changed from cat.slug to cat.name\n                .map((cat) => (\n                  <a\n                    key={cat.name} // \u2705 FIXED: Changed from cat.slug to cat.name\n                    href={`/blog/category/${cat.name}`} // \u2705 FIXED: Changed from cat.slug to cat.name\n                    className=\"bg-white p-6 rounded-lg text-center hover:shadow-lg transition-shadow border border-gray-100 hover:border-pink-300\"\n                  >\n                    <h3 className=\"font-semibold text-gray-800 mb-2\">{cat.name}</h3>\n                    <span className=\"text-sm text-gray-600\">\n                      {cat.count} {cat.count === 1 ? 'article' : 'articles'}\n                    </span>\n                  </a>\n                ))}\n            </div>\n          </div>\n        </section>\n      </div>\n    </>\n  );\n}\n"
  },
  {
    "path": "src/app/blog/tag/[tag]/page.tsx",
    "content": "import { Metadata } from 'next';\nimport { notFound } from 'next/navigation';\nimport { getPostsByTag, getAllTags } from '@/lib/blog';\nimport BlogCard from '@/components/Blog/BlogCard';\nimport Breadcrumbs from '@/components/Breadcrumbs';\n\ninterface PageProps {\n  params: {\n    tag: string;\n  };\n  searchParams: {\n    page?: string;\n  };\n}\n\n// \u2705 NEW - Generate static params for all tags\nexport async function generateStaticParams() {\n  const tags = await getAllTags();\n  return tags.map((tag) => ({\n    tag: tag.slug,\n  }));\n}\n\n// \u2705 NEW - Generate metadata for tag pages\nexport async function generateMetadata({ params }: PageProps): Promise<Metadata> {\n  const { tag } = params;\n  const posts = await getPostsByTag(tag);\n  const tags = await getAllTags();\n  const tagData = tags.find(t => t.slug === tag);\n\n  if (!tagData || posts.length === 0) {\n    return {\n      title: 'Tag Not Found - Mirelle',\n      description: 'The tag you are looking for does not exist.',\n      robots: {\n        index: false,\n        follow: false,\n      },\n    };\n  }\n\n  const canonicalUrl = `https://mirelleinspo.com/blog/tag/${tag}`;\n  const tagName = tagData.name;\n  \n  return {\n    title: `${tagName} - Nail Care Articles | Mirelle`,\n    description: `Discover ${posts.length} expert articles tagged with ${tagName}. Professional nail care tips, trends, and tutorials curated by Mirelle.`,\n    keywords: `${tagName}, nail care, nail art, nail trends, ${tagName.toLowerCase()}, manicure, beauty blog`,\n    authors: [{ name: 'Mirelle' }],\n    creator: 'Mirelle',\n    publisher: 'Mirelle',\n    alternates: {\n      canonical: canonicalUrl,\n    },\n    robots: {\n      index: true,\n      follow: true,\n      googleBot: {\n        index: true,\n        follow: true,\n        'max-video-preview': -1,\n        'max-image-preview': 'large',\n        'max-snippet': -1,\n      },\n    },\n    openGraph: {\n      title: `${tagName} - Nail Care Articles | Mirelle`,\n      description: `Discover ${posts.length} expert articles tagged with ${tagName}`,\n      type: 'website',\n      url: canonicalUrl,\n      siteName: 'Mirelle',\n      locale: 'en_US',\n      images: [{\n        url: 'https://mirelleinspo.com/blog-tag.jpg',\n        width: 1200,\n        height: 630,\n        alt: `${tagName} articles on Mirelle`,\n        type: 'image/jpeg',\n      }],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: `${tagName} Articles | Mirelle`,\n      description: `Discover expert ${tagName} articles`,\n      images: ['https://mirelleinspo.com/blog-tag.jpg'],\n      creator: '@mirelleinspo',\n      site: '@mirelleinspo',\n    },\n  };\n}\n\nexport default async function TagPage({ params, searchParams }: PageProps) {\n  const { tag } = params;\n  const currentPage = Number(searchParams.page) || 1;\n  const postsPerPage = 12;\n\n  const allPosts = await getPostsByTag(tag);\n  const tags = await getAllTags();\n  const tagData = tags.find(t => t.slug === tag);\n\n  if (!tagData || allPosts.length === 0) {\n    notFound();\n  }\n\n  // Calculate pagination\n  const totalPages = Math.ceil(allPosts.length / postsPerPage);\n  const startIndex = (currentPage - 1) * postsPerPage;\n  const endIndex = startIndex + postsPerPage;\n  const paginatedPosts = allPosts.slice(startIndex, endIndex);\n\n  // \u2705 NEW - Breadcrumb structured data\n  const breadcrumbSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: [\n      {\n        '@type': 'ListItem',\n        position: 1,\n        name: 'Home',\n        item: 'https://mirelleinspo.com',\n      },\n      {\n        '@type': 'ListItem',\n        position: 2,\n        name: 'Blog',\n        item: 'https://mirelleinspo.com/blog',\n      },\n      {\n        '@type': 'ListItem',\n        position: 3,\n        name: `#${tagData.name}`,\n        item: `https://mirelleinspo.com/blog/tag/${tag}`,\n      },\n    ],\n  };\n\n  // \u2705 NEW - Collection page structured data\n  const collectionSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'CollectionPage',\n    name: `${tagData.name} Articles`,\n    description: `Collection of ${allPosts.length} articles tagged with ${tagData.name}`,\n    url: `https://mirelleinspo.com/blog/tag/${tag}`,\n    about: {\n      '@type': 'Thing',\n      name: tagData.name,\n    },\n    numberOfItems: allPosts.length,\n  };\n\n  return (\n    <>\n      {/* Structured Data */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbSchema) }}\n      />\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(collectionSchema) }}\n      />\n\n      <div className=\"min-h-screen\">\n        {/* Breadcrumbs */}\n        <Breadcrumbs \n          items={[{ label: 'Blog', href: '/blog' }]} \n          currentPage={`#${tagData.name}`}\n        />\n\n        {/* Hero Section */}\n        <section className=\"relative bg-gradient-to-r from-purple-200 to-pink-200 py-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <div className=\"inline-block bg-white px-6 py-3 rounded-full mb-4 shadow-md\">\n                <span className=\"text-3xl font-bold text-gray-800\">#{tagData.name}</span>\n              </div>\n              <p className=\"text-xl text-gray-600 mb-6\">\n                Explore articles tagged with <strong>{tagData.name}</strong>\n              </p>\n              <div className=\"flex items-center justify-center gap-2 text-gray-700\">\n                <span className=\"text-2xl\">\ud83d\udcdd</span>\n                <span className=\"font-semibold\">\n                  {allPosts.length} {allPosts.length === 1 ? 'Article' : 'Articles'}\n                </span>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Posts Grid */}\n        <section className=\"py-16 bg-white\">\n          <div className=\"container mx-auto px-4\">\n            {paginatedPosts.length > 0 ? (\n              <>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n                  {paginatedPosts.map((post) => (\n                    <BlogCard key={post.slug} post={post} />\n                  ))}\n                </div>\n\n                {/* Pagination */}\n                {totalPages > 1 && (\n                  <div className=\"flex justify-center items-center gap-2 mt-12\">\n                    {/* Previous Button */}\n                    {currentPage > 1 && (\n                      <a\n                        href={`/blog/tag/${tag}?page=${currentPage - 1}`}\n                        className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n                      >\n                        \u2190 Previous\n                      </a>\n                    )}\n\n                    {/* Page Numbers */}\n                    <div className=\"flex gap-2\">\n                      {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                        <a\n                          key={page}\n                          href={`/blog/tag/${tag}?page=${page}`}\n                          className={`px-4 py-2 rounded-lg transition-colors ${\n                            page === currentPage\n                              ? 'bg-purple-600 text-white'\n                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                          }`}\n                        >\n                          {page}\n                        </a>\n                      ))}\n                    </div>\n\n                    {/* Next Button */}\n                    {currentPage < totalPages && (\n                      <a\n                        href={`/blog/tag/${tag}?page=${currentPage + 1}`}\n                        className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n                      >\n                        Next \u2192\n                      </a>\n                    )}\n                  </div>\n                )}\n              </>\n            ) : (\n              <div className=\"text-center py-16\">\n                <h3 className=\"text-2xl font-bold text-gray-600 mb-4\">\n                  No articles found with this tag\n                </h3>\n                <a\n                  href=\"/blog\"\n                  className=\"text-purple-600 hover:text-purple-700 underline\"\n                >\n                  \u2190 Back to all articles\n                </a>\n              </div>\n            )}\n          </div>\n        </section>\n\n        {/* Popular Tags Section */}\n        <section className=\"py-16 bg-gray-50\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-800\">\n              Explore Other Tags\n            </h2>\n            <div className=\"flex flex-wrap justify-center gap-3 max-w-5xl mx-auto\">\n              {tags\n                .filter(t => t.slug !== tag)\n                .slice(0, 20)\n                .map((t) => (\n                  <a\n                    key={t.slug}\n                    href={`/blog/tag/${t.slug}`}\n                    className=\"bg-white px-4 py-2 rounded-full text-sm font-medium text-gray-700 hover:bg-purple-100 hover:text-purple-700 transition-colors border border-gray-200 hover:border-purple-300\"\n                  >\n                    #{t.name} ({t.count})\n                  </a>\n                ))}\n            </div>\n          </div>\n        </section>\n      </div>\n    </>\n  );\n}\n"
  },
  {
    "path": "src/app/blog/[slug]/page.tsx",
    "content": "import { notFound } from 'next/navigation';\nimport { getBlogPost, getAllBlogSlugs } from '@/lib/blog';\nimport BlogPost from '@/components/Blog/BlogPost';\nimport Breadcrumbs from '@/components/Breadcrumbs';\nimport RelatedPosts from '@/components/Blog/RelatedPosts'; // \u2705 NEW - Import RelatedPosts component\nimport type { Metadata } from 'next';\nimport { generateSchemas } from '@/lib/generateSchemas';\n\ninterface PageProps {\n  params: {\n    slug: string;\n  };\n}\n\nexport async function generateStaticParams() {\n  const slugs = await getAllBlogSlugs();\n  return slugs.map((slug) => ({\n    slug: slug,\n  }));\n}\n\nexport async function generateMetadata({ params }: PageProps): Promise<Metadata> {\n  const { slug } = params;\n  const post = await getBlogPost(slug);\n  \n  if (!post) {\n    return {\n      title: 'Post Not Found - Mirelle',\n      description: 'The blog post you are looking for does not exist.',\n      robots: {\n        index: false,\n        follow: false,\n      },\n    };\n  }\n\n  const canonicalUrl = `https://mirelleinspo.com/blog/${slug}`;\n  const imageUrl = post.image ? `https://mirelleinspo.com${post.image}` : 'https://mirelleinspo.com/og-default.png';\n  const imageAltText = post.imageAlt || post.title;\n  \n  return {\n    title: `${post.title} | Mirelle`,\n    description: post.excerpt || `Discover ${post.title} - expert nail tips, trends, and tutorials from Mirelle.`,\n    keywords: post.tags?.join(', ') || 'nail art, nail care, nail trends, manicure tips, nail design',\n    authors: [{ name: post.author || 'Mirelle' }],\n    creator: post.author || 'Mirelle',\n    publisher: 'Mirelle',\n    alternates: {\n      canonical: canonicalUrl,\n    },\n    robots: {\n      index: true,\n      follow: true,\n      googleBot: {\n        index: true,\n        follow: true,\n        'max-video-preview': -1,\n        'max-image-preview': 'large',\n        'max-snippet': -1,\n      },\n    },\n    openGraph: {\n      title: `${post.title} | Mirelle`,\n      description: post.excerpt || `Discover ${post.title} - expert nail inspiration from Mirelle.`,\n      type: 'article',\n      url: canonicalUrl,\n      siteName: 'Mirelle',\n      locale: 'en_US',\n      images: [{\n        url: imageUrl,\n        width: post.imageWidth || 1200,\n        height: post.imageHeight || 630,\n        alt: post.title,\n        type: 'image/jpeg',\n      }],\n      publishedTime: post.date,\n      modifiedTime: post.updatedDate || post.date,\n      authors: [post.author || 'Mirelle'],\n      section: post.category || 'Nail Care',\n      tags: post.tags || [],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: `${post.title} | Mirelle`,\n      description: post.excerpt || `Discover ${post.title} - expert nail inspiration from Mirelle.`,\n      images: [imageUrl],\n      creator: '@mirelleinspo',\n      site: '@mirelleinspo',\n    },\n    other: {\n      'article:published_time': post.date,\n      'article:modified_time': post.dateModified || post.updatedDate || post.date,\n      'article:author': post.author || 'Mirelle',\n      'article:section': post.category || 'Nail Care',\n      'article:tag': post.tags?.join(', ') || '',\n    },\n  };\n}\n\nexport default async function BlogPostPage({ params }: PageProps) {\n  const { slug } = params;\n  const post = await getBlogPost(slug);\n  \n  if (!post) notFound();\n\n  // \u2705 UPDATED: Pass galleryImages to schema generator\n  const schemas = generateSchemas({\n    post,\n    slug: params.slug,\n    faqItems: post.faqItems,\n    tutorialSteps: post.tutorialSteps,\n    tutorialMetadata: post.tutorialMetadata,\n    galleryImages: post.galleryImages,  // \u2705 NEW: Pass gallery images\n  });\n  \n\n  return (\n    <>\n      {/* Core Structured Data */}\n      <script \n        type=\"application/ld+json\" \n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.articleSchema) }} \n      />\n      <script \n        type=\"application/ld+json\" \n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.breadcrumbSchema) }} \n      />\n      <script \n        type=\"application/ld+json\" \n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.websiteSchema) }} \n      />\n      <script \n        type=\"application/ld+json\" \n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.organizationSchema) }} \n      />\n      \n      {/* Conditional Structured Data */}\n      {schemas.faqSchema && (\n        <script \n          type=\"application/ld+json\" \n          dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.faqSchema) }} \n        />\n      )}\n      {schemas.howToSchema && (\n        <script \n          type=\"application/ld+json\" \n          dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.howToSchema) }} \n        />\n      )}\n      {schemas.videoSchema && (\n        <script \n          type=\"application/ld+json\" \n          dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.videoSchema) }} \n        />\n      )}\n      {/* \u2705 NEW: Add image gallery schema */}\n      {schemas.imageGallerySchema && (\n        <script \n          type=\"application/ld+json\" \n          dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.imageGallerySchema) }} \n        />\n      )}\n      \n      {/* Breadcrumbs */}\n      <Breadcrumbs \n        items={[{ label: 'Blog', href: '/blog' }]} \n        currentPage={post.title} \n      />\n      \n      {/* Main Blog Post Content */}\n      <BlogPost post={post} />\n\n      {/* \u2705 NEW - Related Posts Section */}\n      <section className=\"bg-gray-50 py-12\">\n        <div className=\"container mx-auto px-4\">\n          <RelatedPosts currentSlug={slug} />\n        </div>\n      </section>\n    </>\n  );\n}\n"
  },
  {
    "path": "src/components/Blog/BlogCard.tsx",
    "content": "import Link from 'next/link';\nimport Image from 'next/image';\nimport { BlogMetadata } from '@/types/blog';\n\ninterface BlogCardProps {\n  post: BlogMetadata;\n}\n\nexport default function BlogCard({ post }: BlogCardProps) {\n  return (\n    <Link \n      href={`/blog/${post.slug}`}\n      className=\"group block relative h-80 rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n    >\n      {/* Background Image */}\n      <div className=\"absolute inset-0\">\n        {post.image ? (\n          <Image\n            src={post.image}\n            alt={post.title}\n            fill\n            className=\"object-cover transition-transform duration-300 group-hover:scale-110\"\n          />\n        ) : (\n          <div className=\"w-full h-full bg-gradient-to-br from-pink-400 via-purple-400 to-indigo-400\" />\n        )}\n        <div className=\"absolute inset-0 bg-black/30 group-hover:bg-black/40 transition-colors duration-300\" />\n      </div>\n\n      {/* Content */}\n      <div className=\"relative h-full p-6 flex flex-col justify-between text-white\">\n        {/* Tags */}\n        <div className=\"flex flex-wrap gap-2\">\n          {post.tags.slice(0, 2).map(tag => (\n            <span \n              key={tag}\n              className=\"bg-white/20 backdrop-blur-sm text-white px-2 py-1 rounded-full text-xs font-medium\"\n            >\n              {tag}\n            </span>\n          ))}\n        </div>\n\n        {/* Bottom Content */}\n        <div>\n          <h3 className=\"text-2xl font-bold mb-2 line-clamp-2 group-hover:text-pink-200 transition-colors\">\n            {post.title}\n          </h3>\n          \n          <p className=\"text-white/90 mb-4 line-clamp-2 text-sm\">\n            {post.excerpt}\n          </p>\n\n          <div className=\"flex justify-between items-center text-sm text-white/80 mb-4\">\n            <span>{new Date(post.date).toLocaleDateString()}</span>\n            <span>{post.readTime} min read</span>\n          </div>\n\n          <div className=\"inline-flex items-center text-white font-semibold hover:text-pink-200 transition-colors\">\n            Read More \n            <svg className=\"w-4 h-4 ml-2 transition-transform group-hover:translate-x-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n\n\n\n// import Link from 'next/link';\n// import Image from 'next/image';\n// import { BlogMetadata } from '@/types/blog';\n\n// interface BlogCardProps {\n//   post: BlogMetadata;\n// }\n\n// export default function BlogCard({ post }: BlogCardProps) {\n//   return (\n//     <Link \n//       href={`/blog/${post.slug}`}\n//       className=\"group block relative h-80 rounded-2xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:scale-105 cursor-pointer\"\n//     >\n//       {/* Background Image */}\n//       <div className=\"absolute inset-0\">\n//         {post.image ? (\n//           <Image\n//             src={post.image}\n//             alt={post.title}\n//             fill\n//             className=\"object-cover transition-transform duration-500 group-hover:scale-110\"\n//           />\n//         ) : (\n//           <div className=\"w-full h-full bg-gradient-to-br from-pink-400 via-purple-400 to-indigo-400\" />\n//         )}\n//         {/* Dark gradient overlay for depth */}\n//         <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-black/10 to-transparent\" />\n//       </div>\n\n//       {/* Content */}\n//       <div className=\"relative h-full p-6 flex flex-col justify-between\">\n//         {/* Tags */}\n//         <div className=\"flex flex-wrap gap-2\">\n//           {post.tags.slice(0, 2).map(tag => (\n//             <span \n//               key={tag}\n//               className=\"bg-white/90 backdrop-blur-md text-gray-800 px-3 py-1 rounded-full text-xs font-semibold shadow-sm\"\n//             >\n//               {tag}\n//             </span>\n//           ))}\n//         </div>\n\n//         {/* Bottom Content with Premium Translucent White Overlay */}\n//         <div className=\"bg-white/85 backdrop-blur-lg rounded-xl p-4 shadow-xl border border-white/20\">\n//           <h3 className=\"text-xl font-bold mb-2 line-clamp-2 text-gray-900 group-hover:text-pink-600 transition-colors\">\n//             {post.title}\n//           </h3>\n          \n//           <p className=\"text-gray-700 mb-3 line-clamp-2 text-sm leading-relaxed\">\n//             {post.excerpt}\n//           </p>\n\n//           <div className=\"flex justify-between items-center text-xs text-gray-600 mb-3 font-medium\">\n//             <span>{new Date(post.date).toLocaleDateString()}</span>\n//             <span>{post.readTime} min read</span>\n//           </div>\n\n//           <div className=\"inline-flex items-center text-pink-600 font-semibold text-sm group-hover:text-pink-700 transition-colors\">\n//             Read More \n//             <svg className=\"w-4 h-4 ml-2 transition-transform group-hover:translate-x-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n//               <path fillRule=\"evenodd\" d=\"M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n//             </svg>\n//           </div>\n//         </div>\n//       </div>\n//     </Link>\n//   );\n// }\n"
  },
  {
    "path": "src/components/Blog/BlogList.tsx",
    "content": "\nimport { BlogMetadata } from '@/types/blog';\nimport BlogCard from './BlogCard';\n\ninterface BlogListProps {\n  posts: BlogMetadata[];\n}\n\nexport default function BlogList({ posts }: BlogListProps) {\n  if (posts.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <h2 className=\"text-2xl font-bold text-gray-600 mb-4\">No blog posts found</h2>\n        <p className=\"text-gray-500\">Check back later for new content!</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {posts.map(post => (\n        <BlogCard key={post.slug} post={post} />\n      ))}\n    </div>\n  );\n}\n"
  },
  {
    "path": "src/components/Blog/BlogPost.tsx",
    "content": "import Image from 'next/image';\nimport Link from 'next/link';\nimport { BlogPost as BlogPostType } from '@/types/blog';\nimport BlogSidebar from './BlogSidebar';\nimport CommentSection from '@/components/Blog/CommentSection';\nimport TLDRSection from './TLDRSection'; // \u2728 NEW IMPORT\n\ninterface BlogPostProps {\n  post: BlogPostType;\n}\n\nexport default function BlogPost({ post }: BlogPostProps) {\n  // Extract headings for Table of Contents\n  const tableOfContents = extractHeadings(post.content);\n  \n  // Related posts\n  const relatedPosts = [\n    {\n      slug: 'halloween-nail-ideas-2025',\n      title: '35+ Halloween Nail Ideas 2025',\n      image: '/images/blog/halloweenhero.png'\n    },\n    {\n      slug: 'christmas-nail-designs-2025',\n      title: '18 Christmas Nail Designs 2025',\n      image: '/images/blog/christmas-nail-designs-2025-hero.jpg'\n    }\n  ].filter(p => p.slug !== post.slug);\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 py-8\">\n      <div className=\"mb-6\">\n        <Link \n          href=\"/blog\"\n          className=\"text-blue-600 hover:text-blue-800 inline-flex items-center gap-2\"\n        >\n          \u2190 Back to Blog\n        </Link>\n      </div>\n\n      {/* Hero Section */}\n      <div className=\"max-w-4xl mx-auto mb-12 text-center\">\n        <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n          {post.title}\n        </h1>\n        \n        <div className=\"flex items-center justify-center gap-4 text-sm text-gray-600 mb-6\">\n          <span>By {post.author}</span>\n          <span>\u2022</span>\n          <span>{new Date(post.date).toLocaleDateString()}</span>\n          <span>\u2022</span>\n          <span>{post.readTime} read</span>\n        </div>\n\n        <div className=\"flex flex-wrap justify-center gap-2 mb-8\">\n          {/* \u2705 Show category badge first if exists */}\n          {post.category && (\n            <span className=\"bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm font-semibold\">\n              {post.category}\n            </span>\n          )}\n          \n          {post.tags.map(tag => (\n            <span \n              key={tag}\n              className=\"bg-pink-100 text-pink-700 px-3 py-1 rounded-full text-sm font-medium\"\n            >\n              {tag}\n            </span>\n          ))}\n        </div>\n        \n        {post.image && (\n          <div className=\"relative h-96 w-full rounded-2xl overflow-hidden shadow-2xl\">\n            <Image\n              src={post.image}\n              alt={post.title}\n              fill\n              className=\"object-cover\"\n              priority\n            />\n          </div>\n        )}\n      </div>\n\n      {/* \u2728 TL;DR SECTION - CRITICAL: Place AFTER header, BEFORE content */}\n      {post.tldr && (\n        <div className=\"max-w-4xl mx-auto mb-12\">\n          <TLDRSection \n            summary={post.tldr.summary}\n            readTime={String(post.readTime)}  // \u2705 Ensure it's a string\n            keyTakeaways={post.tldr.keyTakeaways}\n          />\n        </div>\n      )}\n\n      {/* Two Column Layout */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-8\">\n        {/* Main Content - Takes 8 columns on large screens */}\n        <article className=\"lg:col-span-8\">\n          <div \n            className=\"prose prose-lg max-w-none \n            [&_h2]:text-pink-600 [&_h2]:text-3xl [&_h2]:mt-12 [&_h2]:mb-6 [&_h2]:font-bold [&_h2]:scroll-mt-24\n            [&_h3]:text-purple-600 [&_h3]:text-xl [&_h3]:mt-8 [&_h3]:mb-4 [&_h3]:font-semibold\n            [&_p]:text-gray-700 [&_p]:leading-relaxed [&_p]:mb-4\n            [&_ul]:my-4 [&_li]:mb-2\n            [&_strong]:text-gray-900 [&_strong]:font-semibold\n            [&_a]:text-blue-600 [&_a]:no-underline hover:[&_a]:text-blue-800\n            [&_img]:rounded-lg [&_img]:shadow-lg [&_img]:my-8\n            [&_hr]:my-8 [&_hr]:border-pink-200\"\n            dangerouslySetInnerHTML={{ __html: post.content }}\n          />\n\n          {/* Comment Section */}\n          <CommentSection postSlug={post.slug} postTitle={post.title} />\n        </article>\n\n        {/* Sidebar - Takes 4 columns on large screens */}\n        <aside className=\"lg:col-span-4\">\n          <BlogSidebar\n            tableOfContents={tableOfContents}\n            relatedPosts={relatedPosts}\n          />\n        </aside>\n      </div>\n    </div>\n  );\n}\n\n// Extract and clean heading text\nfunction extractHeadings(htmlContent: string): { id: string; title: string }[] {\n  const headings: { id: string; title: string }[] = [];\n  const regex = /<h2[^>]*id=\"([^\"]*)\"[^>]*>(.*?)<\\/h2>/gi;\n  let match;\n  \n  while ((match = regex.exec(htmlContent)) !== null) {\n    const id = match[1];\n    const rawTitle = match[2];\n    // Strip ALL HTML tags and decode entities\n    const title = rawTitle\n      .replace(/<[^>]*>/g, '')\n      .replace(/&amp;/g, '&')\n      .replace(/&lt;/g, '<')\n      .replace(/&gt;/g, '>')\n      .replace(/&quot;/g, '\"')\n      .trim();\n    \n    headings.push({ id, title });\n  }\n  \n  return headings;\n}\n"
  },
  {
    "path": "src/components/Blog/BlogSearch.tsx",
    "content": "\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport Fuse from 'fuse.js';\nimport { BlogMetadata } from '@/types/blog';\n\ninterface BlogSearchProps {\n  posts: BlogMetadata[];\n  onSearchResults?: (results: BlogMetadata[]) => void;\n}\n\nexport default function BlogSearch({ posts, onSearchResults }: BlogSearchProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<BlogMetadata[]>(posts);\n  const [isSearching, setIsSearching] = useState(false);\n\n  // \u2705 NEW - Initialize Fuse.js with optimized options\n  const fuse = new Fuse(posts, {\n    keys: [\n      { name: 'title', weight: 0.7 },\n      { name: 'excerpt', weight: 0.3 },\n      { name: 'tags', weight: 0.5 },\n      { name: 'category', weight: 0.4 },\n    ],\n    threshold: 0.3,\n    includeScore: true,\n    minMatchCharLength: 2,\n  });\n\n  // \u2705 NEW - Debounced search handler\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (searchQuery.trim() === '') {\n        setSearchResults(posts);\n        setIsSearching(false);\n        onSearchResults?.(posts);\n      } else {\n        setIsSearching(true);\n        const results = fuse.search(searchQuery);\n        const filteredPosts = results.map(result => result.item);\n        setSearchResults(filteredPosts);\n        setIsSearching(false);\n        onSearchResults?.(filteredPosts);\n      }\n    }, 300); // 300ms debounce\n\n    return () => clearTimeout(timer);\n  }, [searchQuery, posts]);\n\n  const handleClear = () => {\n    setSearchQuery('');\n    setSearchResults(posts);\n    onSearchResults?.(posts);\n  };\n\n  return (\n    <div className=\"relative\">\n      <div className=\"relative\">\n        {/* Search Icon */}\n        <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"h-5 w-5\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n            />\n          </svg>\n        </div>\n\n        {/* Search Input */}\n        <input\n          type=\"text\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          placeholder=\"Search articles...\"\n          className=\"w-full pl-12 pr-12 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-transparent\"\n        />\n\n        {/* Clear Button */}\n        {searchQuery && (\n          <button\n            onClick={handleClear}\n            className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n            aria-label=\"Clear search\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-5 w-5\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {/* Search Status */}\n      {searchQuery && (\n        <div className=\"mt-2 text-sm text-gray-600\">\n          {isSearching ? (\n            <span>Searching...</span>\n          ) : (\n            <span>\n              Found {searchResults.length} {searchResults.length === 1 ? 'result' : 'results'}\n              {searchQuery && ` for \"${searchQuery}\"`}\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"
  },
  {
    "path": "src/components/Blog/BlogSidebar.tsx",
    "content": "interface BlogSidebarProps {\n  tableOfContents: { id: string; title: string }[];\n  relatedPosts?: { slug: string; title: string; image: string }[];\n}\n\nexport default function BlogSidebar({ tableOfContents, relatedPosts }: BlogSidebarProps) {\n  return (\n    <div className=\"space-y-6\">\n      {/* Table of Contents - Sticky */}\n      <div className=\"bg-pink-50 rounded-lg p-6 sticky top-4\">\n        <h3 className=\"text-lg font-bold text-gray-800 mb-4\">Table of Contents</h3>\n        <nav className=\"space-y-2\">\n          {tableOfContents.map((item) => (\n            <a\n              key={item.id}\n              href={`#${item.id}`}\n              className=\"block text-sm text-gray-700 hover:text-pink-600 transition-colors py-1\"\n            >\n              {item.title}\n            </a>\n          ))}\n        </nav>\n      </div>\n\n      {/* Pinterest Follow */}\n      <div className=\"bg-gradient-to-br from-pink-100 to-purple-100 rounded-lg p-6 text-center\">\n        <h3 className=\"text-lg font-bold text-gray-800 mb-2\">Follow Us</h3>\n        <p className=\"text-sm text-gray-600 mb-4\">Get daily nail inspiration</p>\n        <a\n          href=\"https://in.pinterest.com/mirelle_inspo/\"\n          target=\"_blank\"\n          rel=\"noopener\"\n          className=\"inline-block bg-red-600 text-white px-6 py-2 rounded-full hover:bg-red-700 transition-colors\"\n        >\n          Follow on Pinterest\n        </a>\n      </div>\n\n      {/* Related Posts */}\n      {relatedPosts && relatedPosts.length > 0 && (\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <h3 className=\"text-lg font-bold text-gray-800 mb-4\">You May Also Like</h3>\n          <div className=\"space-y-4\">\n            {relatedPosts.map((post) => (\n              <a key={post.slug} href={`/blog/${post.slug}`} className=\"block group\">\n                <img\n                  src={post.image}\n                  alt={post.title}\n                  className=\"w-full h-32 object-cover rounded-lg mb-2 group-hover:opacity-90 transition-opacity\"\n                />\n                <p className=\"text-sm font-medium text-gray-700 group-hover:text-pink-600\">\n                  {post.title}\n                </p>\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"
  },
  {
    "path": "src/components/Blog/CommentSection.tsx",
    "content": "'use client';\n\nimport { useState } from 'react';\n\ninterface CommentSectionProps {\n  postSlug: string;\n  postTitle: string;\n}\n\nexport default function CommentSection({ postSlug, postTitle }: CommentSectionProps) {\n  const [formData, setFormData] = useState({\n    rating: '',\n    name: '',\n    email: '',\n    comment: ''\n  });\n  const [status, setStatus] = useState({ message: '', type: '' });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async () => {\n    // Validation\n    if (!formData.rating || !formData.name || !formData.email || !formData.comment) {\n      setStatus({ message: '\u274c Please fill in all fields', type: 'error' });\n      return;\n    }\n\n    if (!formData.email.includes('@')) {\n      setStatus({ message: '\u274c Please enter a valid email', type: 'error' });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // Send to your API endpoint (create this next)\n      const response = await fetch('/api/comments', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...formData,\n          postSlug,\n          postTitle,\n          timestamp: new Date().toISOString()\n        })\n      });\n\n      if (response.ok) {\n        setStatus({ \n          message: '\u2728 Thanks! I\\'ll reply within 24 hours!', \n          type: 'success' \n        });\n        setFormData({ rating: '', name: '', email: '', comment: '' });\n      } else {\n        throw new Error('Submission failed');\n      }\n    } catch (error) {\n      setStatus({ \n        message: '\u274c Oops! Try again or email me directly.', \n        type: 'error' \n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const inputClass = \"w-full px-4 py-3.5 border-2 border-gray-200 rounded-xl text-base transition-all focus:border-purple-500 focus:ring-4 focus:ring-purple-100 focus:outline-none bg-white\";\n  const labelClass = \"block mb-2 font-semibold text-gray-700 text-sm\";\n\n  return (\n    <div className=\"mt-12 p-8 bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl border-2 border-purple-100\">\n      <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">\ud83d\udcac Your Turn!</h3>\n      <p className=\"text-gray-600 mb-6\">Which of the designs are you trying? Let me know!</p>\n\n      {/* Rating */}\n      <div className=\"mb-5\">\n        <label htmlFor=\"rating\" className={labelClass}>\u2b50 Rate This Guide</label>\n        <select\n          id=\"rating\"\n          value={formData.rating}\n          onChange={(e) => setFormData({ ...formData, rating: e.target.value })}\n          className={inputClass}\n        >\n          <option value=\"\">Select your rating</option>\n          <option value=\"5\">\u2b50\u2b50\u2b50\u2b50\u2b50 Absolutely amazing!</option>\n          <option value=\"4\">\u2b50\u2b50\u2b50\u2b50 Really helpful</option>\n          <option value=\"3\">\u2b50\u2b50\u2b50 Pretty good</option>\n          <option value=\"2\">\u2b50\u2b50 Could be better</option>\n          <option value=\"1\">\u2b50 Needs improvement</option>\n        </select>\n      </div>\n\n      {/* Name */}\n      <div className=\"mb-5\">\n        <label htmlFor=\"name\" className={labelClass}>\ud83d\udc64 Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          placeholder=\"e.g., Sarah\"\n          value={formData.name}\n          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n          className={inputClass}\n        />\n      </div>\n\n      {/* Email */}\n      <div className=\"mb-5\">\n        <label htmlFor=\"email\" className={labelClass}>\ud83d\udce7 Your Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          placeholder=\"your@email.com\"\n          value={formData.email}\n          onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n          className={inputClass}\n        />\n        <p className=\"mt-1.5 text-xs text-gray-500\">So I can reply to your questions personally!</p>\n      </div>\n\n      {/* Comment */}\n      <div className=\"mb-6\">\n        <label htmlFor=\"comment\" className={labelClass}>\ud83d\udcad Your Comment</label>\n        <textarea\n          id=\"comment\"\n          placeholder=\"Tell me which design you're trying, ask questions, or share your nail pics! I read every single one \ud83d\udc85\"\n          value={formData.comment}\n          onChange={(e) => setFormData({ ...formData, comment: e.target.value })}\n          className={`${inputClass} min-h-[120px] resize-y`}\n        />\n      </div>\n\n      {/* Submit Button */}\n      <button\n        onClick={handleSubmit}\n        disabled={isSubmitting}\n        className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white font-semibold py-4 px-8 rounded-xl hover:shadow-xl hover:-translate-y-0.5 transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\n      >\n        {isSubmitting ? '\u23f3 Submitting...' : '\u2728 Submit Comment'}\n      </button>\n\n      {/* Status Message */}\n      {status.message && (\n        <div className={`mt-4 p-4 rounded-xl text-center font-semibold ${\n          status.type === 'success' \n            ? 'bg-green-100 text-green-800' \n            : 'bg-red-100 text-red-800'\n        }`}>\n          {status.message}\n        </div>\n      )}\n\n      <p className=\"text-center mt-5 text-sm text-gray-600\">\n        \ud83e\udd1d I reply to <strong>everyone</strong> within 24 hours. That's a promise!\n      </p>\n    </div>\n  );\n}\n"
  },
  {
    "path": "src/components/Blog/Pagination.tsx",
    "content": "interface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  baseUrl: string;\n}\n\nexport default function Pagination({ currentPage, totalPages, baseUrl }: PaginationProps) {\n  if (totalPages <= 1) {\n    return null;\n  }\n\n  // \u2705 NEW - Generate page numbers with ellipsis for large page counts\n  const getPageNumbers = () => {\n    const pages: (number | string)[] = [];\n    const showEllipsisThreshold = 7;\n\n    if (totalPages <= showEllipsisThreshold) {\n      // Show all pages if total is small\n      for (let i = 1; i <= totalPages; i++) {\n        pages.push(i);\n      }\n    } else {\n      // Show first page\n      pages.push(1);\n\n      // Show ellipsis or pages around current page\n      if (currentPage > 3) {\n        pages.push('...');\n      }\n\n      // Show pages around current page\n      for (let i = Math.max(2, currentPage - 1); i <= Math.min(totalPages - 1, currentPage + 1); i++) {\n        pages.push(i);\n      }\n\n      // Show ellipsis before last page\n      if (currentPage < totalPages - 2) {\n        pages.push('...');\n      }\n\n      // Show last page\n      pages.push(totalPages);\n    }\n\n    return pages;\n  };\n\n  const pageNumbers = getPageNumbers();\n  const prevPage = currentPage > 1 ? currentPage - 1 : null;\n  const nextPage = currentPage < totalPages ? currentPage + 1 : null;\n\n  return (\n    <nav className=\"flex justify-center items-center gap-2 mt-12\" aria-label=\"Pagination\">\n      {/* Previous Button */}\n      {prevPage ? (\n        <a\n          href={`${baseUrl}?page=${prevPage}`}\n          className=\"px-4 py-2 bg-pink-600 text-white rounded-lg hover:bg-pink-700 transition-colors font-medium\"\n          aria-label=\"Previous page\"\n        >\n          \u2190 Previous\n        </a>\n      ) : (\n        <button\n          disabled\n          className=\"px-4 py-2 bg-gray-200 text-gray-400 rounded-lg cursor-not-allowed font-medium\"\n          aria-label=\"Previous page (disabled)\"\n        >\n          \u2190 Previous\n        </button>\n      )}\n\n      {/* Page Numbers */}\n      <div className=\"flex gap-2\">\n        {pageNumbers.map((page, index) => {\n          if (page === '...') {\n            return (\n              <span key={`ellipsis-${index}`} className=\"px-4 py-2 text-gray-500\">\n                ...\n              </span>\n            );\n          }\n\n          const pageNum = page as number;\n          const isActive = pageNum === currentPage;\n\n          return (\n            <a\n              key={pageNum}\n              href={`${baseUrl}?page=${pageNum}`}\n              className={`px-4 py-2 rounded-lg transition-colors font-medium ${\n                isActive\n                  ? 'bg-pink-600 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n              aria-label={`Page ${pageNum}`}\n              aria-current={isActive ? 'page' : undefined}\n            >\n              {pageNum}\n            </a>\n          );\n        })}\n      </div>\n\n      {/* Next Button */}\n      {nextPage ? (\n        <a\n          href={`${baseUrl}?page=${nextPage}`}\n          className=\"px-4 py-2 bg-pink-600 text-white rounded-lg hover:bg-pink-700 transition-colors font-medium\"\n          aria-label=\"Next page\"\n        >\n          Next \u2192\n        </a>\n      ) : (\n        <button\n          disabled\n          className=\"px-4 py-2 bg-gray-200 text-gray-400 rounded-lg cursor-not-allowed font-medium\"\n          aria-label=\"Next page (disabled)\"\n        >\n          Next \u2192\n        </button>\n      )}\n    </nav>\n  );\n}\n"
  },
  {
    "path": "src/components/Blog/PinterestOverlay.tsx",
    "content": "'use client';\n\nimport { useEffect } from 'react';\nimport { usePathname } from 'next/navigation';\n\nexport default function PinterestOverlay() {\n  const pathname = usePathname();\n\n  useEffect(() => {\n    // Wait for Pinterest script to load\n    const initializePinterest = () => {\n      const images = document.querySelectorAll('article img');\n      \n      images.forEach((img) => {\n        // Skip if already processed\n        if (img.parentElement?.classList.contains('pinterest-wrapper')) return;\n        \n        const imgElement = img as HTMLImageElement;\n        const src = imgElement.src;\n        const alt = imgElement.alt || 'Nail inspiration from Mirelle';\n        \n        // Get full URLs\n        const fullUrl = `https://mirelleinspo.com${pathname}`;\n        const fullImageUrl = src.startsWith('http') ? src : `https://mirelleinspo.com${src}`;\n        \n        // Generate Pinterest board URL from slug\n        const slug = pathname.split('/').pop() || '';\n        const pinterestBoardUrl = `https://www.pinterest.com/mirelle_inspo/${slug}/`;\n        \n        const pinterestSaveUrl = `https://www.pinterest.com/pin/create/button/?url=${encodeURIComponent(fullUrl)}&media=${encodeURIComponent(fullImageUrl)}&description=${encodeURIComponent(alt)}`;\n        \n        // Create wrapper\n        const wrapper = document.createElement('div');\n        wrapper.className = 'pinterest-wrapper relative group inline-block w-full my-8';\n        \n        // Create board link wrapper\n        const boardLink = document.createElement('a');\n        boardLink.href = pinterestBoardUrl;\n        boardLink.target = '_blank';\n        boardLink.rel = 'noopener';\n        boardLink.className = 'block';\n        \n        // Create Pinterest save button\n        const pinButton = document.createElement('a');\n        pinButton.href = pinterestSaveUrl;\n        pinButton.target = '_blank';\n        pinButton.rel = 'noopener';\n        pinButton.setAttribute('data-pin-do', 'buttonPin');\n        pinButton.setAttribute('data-pin-tall', 'true');\n        pinButton.className = 'absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity bg-red-600 text-white px-3 py-2 rounded-full hover:bg-red-700 text-sm font-medium shadow-lg flex items-center gap-1 z-10';\n        pinButton.innerHTML = `\n          <svg class=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path d=\"M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm0 19c-.721 0-1.418-.109-2.073-.312.286-.465.713-1.227.713-1.227s.179.34.889.34c1.917 0 3.289-1.755 3.289-4.097 0-1.771-1.5-3.463-3.773-3.463-2.834 0-4.265 2.028-4.265 3.719 0 1.023.388 1.929 1.222 2.27.137.056.21.031.243-.085l.173-.688c.015-.058.007-.112-.041-.167-.282-.337-.463-.772-.463-1.39 0-1.79 1.338-3.393 3.488-3.393 1.902 0 2.948 1.162 2.948 2.713 0 2.042-1.031 3.763-2.562 3.763-.846 0-1.479-.699-1.276-1.559.243-1.027.714-2.135.714-2.877 0-.664-.356-1.218-1.093-1.218-.867 0-1.563.897-1.563 2.099 0 .766.259 1.284.259 1.284s-.888 3.761-1.044 4.421c-.184.779-.027 1.855-.013 1.952C6.157 21.395 2 17.143 2 12 2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10z\"/>\n          </svg>\n          Pin\n        `;\n        \n        // Create CTA text\n        const cta = document.createElement('span');\n        cta.className = 'text-blue-600 underline mt-2 inline-block text-sm text-center block';\n        cta.textContent = 'View More on Pinterest \u2192';\n        \n        // Wrap image\n        const parent = imgElement.parentNode;\n        parent?.insertBefore(wrapper, imgElement);\n        boardLink.appendChild(imgElement);\n        wrapper.appendChild(boardLink);\n        wrapper.appendChild(pinButton);\n        wrapper.appendChild(cta);\n      });\n\n      // Re-initialize Pinterest widgets\n      if (window.PinUtils) {\n        window.PinUtils.build();\n      }\n    };\n\n    // Wait for images to load\n    setTimeout(initializePinterest, 500);\n    \n    // Also run when images are added dynamically\n    const observer = new MutationObserver(initializePinterest);\n    observer.observe(document.body, { childList: true, subtree: true });\n    \n    return () => observer.disconnect();\n  }, [pathname]);\n\n  return null;\n}\n\n// Type declaration for Pinterest\ndeclare global {\n  interface Window {\n    PinUtils?: {\n      build: () => void;\n    };\n  }\n}\n"
  },
  {
    "path": "src/components/Blog/RelatedPosts.tsx",
    "content": "import Link from 'next/link';\nimport Image from 'next/image';\nimport { getRelatedPosts } from '@/lib/blog';\n\ninterface RelatedPostsProps {\n  currentSlug: string;\n  limit?: number;\n}\n\nexport default async function RelatedPosts({ currentSlug, limit = 3 }: RelatedPostsProps) {\n  const relatedPosts = await getRelatedPosts(currentSlug, limit);\n  if (relatedPosts.length === 0) {\n    return null;\n  }\n\n  return (\n    <section className=\"mt-16 pt-16 border-t border-gray-200\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-3xl font-bold text-gray-800 mb-8\">Related Articles</h2>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {relatedPosts.map((post) => (\n            <Link\n              key={post.slug}\n              href={`/blog/${post.slug}`}\n              className=\"group block bg-white rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-shadow duration-300\"\n            >\n              {/* Image */}\n              {post.image ? (\n                <div className=\"relative w-full h-48 overflow-hidden\">\n                  <Image\n                    src={post.image}\n                    alt={post.imageAlt || post.title}\n                    fill\n                    className=\"object-cover group-hover:scale-105 transition-transform duration-300\"\n                    sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 33vw, 33vw\"\n                  />\n                </div>\n              ) : (\n                <div className=\"w-full h-48 bg-gradient-to-br from-pink-200 to-purple-200 flex items-center justify-center\">\n                  <span className=\"text-4xl\">\ud83d\udc85</span>\n                </div>\n              )}\n\n              {/* Content */}\n              <div className=\"p-6\">\n                {post.category && (\n                  <span className=\"inline-block px-3 py-1 text-xs font-semibold text-pink-600 bg-pink-100 rounded-full mb-3\">\n                    {post.category}\n                  </span>\n                )}\n\n                <h3 className=\"text-lg font-bold text-gray-800 mb-2 group-hover:text-pink-600 transition-colors line-clamp-2\">\n                  {post.title}\n                </h3>\n\n                <p className=\"text-sm text-gray-600 mb-4 line-clamp-2\">\n                  {post.excerpt}\n                </p>\n\n                <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                  <span>{post.readTime}</span>\n                  <span className=\"text-pink-600 font-medium group-hover:underline\">\n                    Read more \u2192\n                  </span>\n                </div>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n\n\n"
  },
  {
    "path": "src/components/Blog/TLDRSection.tsx",
    "content": "import React from 'react';\n\ninterface TLDRProps {\n  summary: string[];\n  readTime: string;\n  keyTakeaways?: string[];\n}\n\nexport default function TLDRSection({ summary, readTime, keyTakeaways }: TLDRProps) {\n  return (\n    <section \n      className=\"tldr-section bg-gradient-to-br from-pink-50 to-purple-50 border-l-4 border-pink-500 p-6 rounded-lg shadow-md mb-8 hover:shadow-lg transition-shadow duration-300\"\n      itemProp=\"abstract\"\n      aria-label=\"Article summary\"\n    >\n      <div className=\"flex items-center gap-2 mb-4\">\n        <span className=\"text-2xl\" aria-hidden=\"true\">\u26a1</span>\n        <h2 className=\"text-xl font-bold text-gray-900 font-serif\">TL;DR - Quick Summary</h2>\n        <span className=\"ml-auto text-sm text-gray-600 font-sans\">{readTime} read</span>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <p className=\"text-gray-700 font-medium font-sans\">What You'll Learn:</p>\n        <ul className=\"space-y-2\">\n          {summary.map((item, index) => (\n            <li key={index} className=\"flex items-start gap-2\">\n              <span className=\"text-pink-500 mt-1 flex-shrink-0\" aria-hidden=\"true\">\u2713</span>\n              <span className=\"text-gray-700 font-sans leading-relaxed\">{item}</span>\n            </li>\n          ))}\n        </ul>\n        \n        {keyTakeaways && keyTakeaways.length > 0 && (\n          <div className=\"mt-4 pt-4 border-t border-pink-200\">\n            <p className=\"text-gray-700 font-medium mb-2 font-sans\">Key Takeaways:</p>\n            <div className=\"flex flex-wrap gap-2\">\n              {keyTakeaways.map((takeaway, index) => (\n                <span \n                  key={index} \n                  className=\"bg-pink-100 text-pink-700 px-3 py-1 rounded-full text-sm font-medium font-sans hover:bg-pink-200 transition-colors duration-200\"\n                >\n                  {takeaway}\n                </span>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n"
  },
  {
    "path": "src/components/BlogSection.tsx",
    "content": "import Link from 'next/link';\nimport Image from 'next/image';\nimport { getAllBlogPosts } from '@/lib/blog';\n\nexport default async function BlogSection() {\n  const posts = await getAllBlogPosts();\n  const recentPosts = posts.slice(0, 6); // Show 6 recent posts in grid\n\n  return (\n    <section className=\"py-16 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold text-gray-800 mb-4\">Latest from Our Blog</h2>\n          <p className=\"text-gray-600 max-w-2xl mx-auto\">\n            Stay updated with expert nail care tips, latest trends, and step-by-step tutorials for beautiful, healthy nails.\n          </p>\n        </div>\n\n        {/* Blog Grid */}\n        {recentPosts.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n            {recentPosts.map((post, index) => (\n              <Link\n                key={post.slug}\n                href={`/blog/${post.slug}`}\n                className={`group block relative rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 cursor-pointer ${\n                  index === 0 ? 'md:col-span-2 md:row-span-2 h-96' : 'h-64'\n                }`}\n              >\n                {/* Background Image */}\n                <div className=\"absolute inset-0\">\n                  {post.image ? (\n                    <Image\n                      src={post.image}\n                      alt={post.title}\n                      fill\n                      className=\"object-cover transition-transform duration-300 group-hover:scale-110\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-full bg-gradient-to-br from-pink-400 via-purple-400 to-indigo-400\" />\n                  )}\n                  <div className=\"absolute inset-0 bg-black/40 group-hover:bg-black/50 transition-colors duration-300\" />\n                </div>\n\n                {/* Content Overlay */}\n                <div className=\"relative h-full p-6 flex flex-col justify-between text-white\">\n                  {/* Tags */}\n                  <div className=\"flex flex-wrap gap-2\">\n                    {post.tags.slice(0, 2).map(tag => (\n                      <span \n                        key={tag}\n                        className=\"bg-white/20 backdrop-blur-sm text-white px-2 py-1 rounded-full text-xs font-medium\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n\n                  {/* Bottom Content */}\n                  <div>\n                    <h3 className={`font-bold mb-2 line-clamp-2 group-hover:text-pink-200 transition-colors ${\n                      index === 0 ? 'text-2xl' : 'text-lg'\n                    }`}>\n                      {post.title}\n                    </h3>\n                    \n                    <p className=\"text-white/90 mb-3 line-clamp-2 text-sm\">\n                      {post.excerpt}\n                    </p>\n\n                    <div className=\"flex justify-between items-center text-xs text-white/80 mb-3\">\n                      <span>{new Date(post.date).toLocaleDateString()}</span>\n                      <span>{post.readTime} min read</span>\n                    </div>\n\n                    <div className=\"inline-flex items-center text-white font-semibold hover:text-pink-200 transition-colors text-sm\">\n                      Read More \u2192\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12 mb-12\">\n            <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">Coming Soon</h3>\n            <p className=\"text-gray-500\">We're crafting amazing content for you. Check back soon!</p>\n          </div>\n        )}\n\n        {/* View All Button */}\n        <div className=\"text-center\">\n          <Link \n            href=\"/blog\"\n            className=\"inline-block bg-pink-500 text-white px-8 py-3 rounded-full font-semibold hover:bg-pink-600 transition-colors duration-300 shadow-lg hover:shadow-xl transform hover:scale-105\"\n          >\n            View All Posts\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n}\n"
  },
  {
    "path": "src/lib/blog.ts",
    "content": "import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport { BlogPost, BlogMetadata } from '@/types/blog';\nimport { marked } from 'marked';\n\nmarked.setOptions({\n  breaks: true,\n  gfm: true,\n});\n\nconst BLOG_DIRECTORY = path.join(process.cwd(), 'src/content/blogs');\nconst METADATA_DIRECTORY = path.join(process.cwd(), 'src/content/metadata');\n\n// \u2705 Read from JSON metadata\nfunction getMetadataFromJSON(slug: string): BlogMetadata | null {\n  try {\n    const metadataPath = path.join(METADATA_DIRECTORY, `${slug}.json`);\n    if (fs.existsSync(metadataPath)) {\n      const jsonContent = fs.readFileSync(metadataPath, 'utf8');\n      return JSON.parse(jsonContent);\n    }\n    return null;\n  } catch (error) {\n    console.error(`Error reading metadata for ${slug}:`, error);\n    return null;\n  }\n}\n\n// \u2705 Fallback to frontmatter\nfunction getMetadataFromFrontmatter(slug: string): BlogMetadata | null {\n  try {\n    const filePath = path.join(BLOG_DIRECTORY, `${slug}.md`);\n    const content = fs.readFileSync(filePath, 'utf8');\n    const { data } = matter(content);\n\n    return {\n      slug,\n      title: data.title || 'Untitled',\n      excerpt: data.excerpt || '',\n      date: data.date || new Date().toISOString(),\n      author: data.author || 'Anonymous',\n      tags: data.tags || [],\n      image: data.image || null,\n      readTime: data.readTime || '5 min',\n      imageAlt: data.imageAlt || undefined,\n      category: data.category || undefined,\n    };\n  } catch (error) {\n    console.error(`Error reading frontmatter for ${slug}:`, error);\n    return null;\n  }\n}\n\n// \u2705 Get all blog posts\nexport async function getAllBlogPosts(): Promise<BlogMetadata[]> {\n  try {\n    const files = fs.readdirSync(BLOG_DIRECTORY);\n    const posts = files\n      .filter((file) => file.endsWith('.md'))\n      .map((file) => {\n        const slug = file.replace('.md', '');\n        const metadata = getMetadataFromJSON(slug) || getMetadataFromFrontmatter(slug);\n        if (!metadata) return null;\n        return { ...metadata, slug };\n      })\n      .filter((post): post is BlogMetadata => post !== null)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n    return posts;\n  } catch (error) {\n    console.error('Error reading blog posts:', error);\n    return [];\n  }\n}\n\n// \u2705 Get single blog post\nexport async function getBlogPost(slug: string): Promise<BlogPost | null> {\n  try {\n    const filePath = path.join(BLOG_DIRECTORY, `${slug}.md`);\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    const { data, content: markdownContent } = matter(fileContent);\n    const metadata = getMetadataFromJSON(slug);\n\n    let htmlContent = await marked(markdownContent);\n    htmlContent = htmlContent.replace(/<h2>(.*?)<\\/h2>/g, (match, text) => {\n      const cleanText = text.replace(/<[^>]*>/g, '');\n      const id = cleanText\n        .toLowerCase()\n        .replace(/[^a-z0-9]+/g, '-')\n        .replace(/^-+|-+$/g, '');\n      return `<h2 id=\"${id}\">${text}</h2>`;\n    });\n\n    const tldr = data.tldr\n      ? {\n          summary: data.tldr.summary || [],\n          keyTakeaways: data.tldr.keyTakeaways || [],\n        }\n      : undefined;\n\n    return {\n      slug,\n      title: metadata?.title || data.title || 'Untitled',\n      excerpt: metadata?.excerpt || data.excerpt || '',\n      content: htmlContent,\n      date: metadata?.date || data.date || new Date().toISOString(),\n      author: metadata?.author || data.author || 'Anonymous',\n      tags: metadata?.tags || data.tags || [],\n      image: metadata?.image || data.image || null,\n      readTime: metadata?.readTime || data.readTime || '5 min',\n      canonical: metadata?.canonical || data.canonical || `https://mirelleinspo.com/blog/${slug}`,\n      updatedDate: metadata?.updatedDate || data.updatedDate || undefined,\n      category: metadata?.category || data.category || undefined,\n      imageAlt: metadata?.imageAlt || data.imageAlt || undefined,\n      imageWidth: metadata?.imageWidth || data.imageWidth || undefined,\n      imageHeight: metadata?.imageHeight || data.imageHeight || undefined,\n      dateModified: metadata?.dateModified || data.dateModified || data.updatedDate || undefined,\n      wordCount: metadata?.wordCount || data.wordCount || undefined,\n      faqItems: data.faqItems || undefined,\n      tutorialSteps: data.tutorialSteps || undefined,\n      tutorialMetadata: data.tutorialMetadata || undefined,\n      videoMetadata: data.videoMetadata || undefined,\n      galleryImages: metadata?.galleryImages || data.galleryImages || undefined,\n      tldr,\n    };\n  } catch (error) {\n    console.error(`Error reading blog post ${slug}:`, error);\n    return null;\n  }\n}\n\n// \u2705 Get all slugs\nexport async function getAllBlogSlugs(): Promise<string[]> {\n  try {\n    const files = fs.readdirSync(BLOG_DIRECTORY);\n    return files.filter((file) => file.endsWith('.md')).map((file) => file.replace('.md', ''));\n  } catch (error) {\n    console.error('Error reading blog slugs:', error);\n    return [];\n  }\n}\n\n// \u2705 Get posts by category\nexport async function getPostsByCategory(categorySlug: string): Promise<BlogMetadata[]> {\n  const allPosts = await getAllBlogPosts();\n  return allPosts.filter((post) => {\n    if (!post.category) return false;\n    const postCategorySlug = post.category.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n    return postCategorySlug === categorySlug;\n  });\n}\n\n// \u2705 Get posts by tag\nexport async function getPostsByTag(tagSlug: string): Promise<BlogMetadata[]> {\n  const allPosts = await getAllBlogPosts();\n  return allPosts.filter((post) =>\n    post.tags.some((tag) => {\n      const tagSlugified = tag.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n      return tagSlugified === tagSlug;\n    })\n  );\n}\n\n// \u2705 Get all categories with slug + count\nexport async function getAllCategories(): Promise<{ name: string; slug: string; count: number; description: string }[]> {\n  const allPosts = await getAllBlogPosts();\n  const categoryMap = new Map<string, number>();\n\n  allPosts.forEach((post) => {\n    if (post.category) {\n      categoryMap.set(post.category, (categoryMap.get(post.category) || 0) + 1);\n    }\n  });\n\n  return Array.from(categoryMap.entries())\n    .map(([name, count]) => ({\n      name,\n      slug: name.toLowerCase().replace(/[^a-z0-9]+/g, '-'),\n      count,\n      description: `Expert articles about ${name}`,\n    }))\n    .sort((a, b) => b.count - a.count);\n}\n\n// \u2705 Get all tags with slug + count\nexport async function getAllTags(): Promise<{ name: string; slug: string; count: number }[]> {\n  const allPosts = await getAllBlogPosts();\n  const tagMap = new Map<string, number>();\n\n  allPosts.forEach((post) => {\n    post.tags.forEach((tag) => {\n      tagMap.set(tag, (tagMap.get(tag) || 0) + 1);\n    });\n  });\n\n  return Array.from(tagMap.entries())\n    .map(([name, count]) => ({\n      name,\n      slug: name.toLowerCase().replace(/[^a-z0-9]+/g, '-'),\n      count,\n    }))\n    .sort((a, b) => b.count - a.count);\n}\n\n// \u2705 Related posts\nexport async function getRelatedPosts(slug: string, limit: number = 3): Promise<BlogMetadata[]> {\n  const currentPost = await getBlogPost(slug);\n  if (!currentPost) return [];\n\n  const allPosts = await getAllBlogPosts();\n\n  const scoredPosts = allPosts\n    .filter((post) => post.slug !== slug)\n    .map((post) => {\n      let score = 0;\n      if (post.category && post.category === currentPost.category) score += 10;\n      const matchingTags = post.tags.filter((tag) => currentPost.tags.includes(tag));\n      score += matchingTags.length * 5;\n      return { post, score };\n    })\n    .filter((item) => item.score > 0)\n    .sort((a, b) => b.score - a.score)\n    .slice(0, limit);\n\n  return scoredPosts.map((item) => item.post);\n}\n\n// \u2705 Paginated posts\nexport async function getPaginatedPosts(\n  page: number = 1,\n  perPage: number = 12\n): Promise<{\n  posts: BlogMetadata[];\n  totalPages: number;\n  currentPage: number;\n  totalPosts: number;\n}> {\n  const allPosts = await getAllBlogPosts();\n  const totalPosts = allPosts.length;\n  const totalPages = Math.ceil(totalPosts / perPage);\n  const start = (page - 1) * perPage;\n  const end = start + perPage;\n  const posts = allPosts.slice(start, end);\n\n  return { posts, totalPages, currentPage: page, totalPosts };\n}\n\n// \u2705 Search\nexport async function searchPosts(query: string): Promise<BlogMetadata[]> {\n  if (!query.trim()) return [];\n\n  const allPosts = await getAllBlogPosts();\n  const lowerQuery = query.toLowerCase();\n\n  return allPosts.filter((post) => {\n    const searchText = `${post.title} ${post.excerpt} ${post.tags.join(' ')} ${post.category || ''}`.toLowerCase();\n    return searchText.includes(lowerQuery);\n  });\n}\n"
  },
  {
    "path": "src/types/blog.ts",
    "content": "import { FAQItem, TutorialStep, TutorialMetadata, VideoMetadata } from '@/lib/generateSchemas';\n\n// \u2705 NEW: Category interface for category pages\nexport interface Category {\n  name: string;\n  slug: string;\n  description: string;\n  count: number;\n}\n\n// \u2705 NEW: Tag interface for tag pages\nexport interface Tag {\n  name: string;\n  slug: string;\n  count: number;\n}\n\n// \u2705 EXISTING: Gallery image interface\nexport interface GalleryImage {\n  url: string;\n  alt: string;\n  width: number;\n  height: number;\n  caption?: string;\n}\n\n// \u2705 EXISTING: Rating interface for aggregate ratings\nexport interface Rating {\n  value: number;\n  count: number;\n}\n\nexport interface BlogPost {\n  slug: string;\n  title: string;\n  excerpt: string;\n  content: string;\n  date: string;\n  author: string;\n  tags: string[];\n  image?: string;\n  readTime: number | string;\n  canonical: string;\n  updatedDate?: string;\n  category?: string;\n  imageAlt?: string;\n  imageWidth?: number;\n  imageHeight?: number;\n  dateModified?: string;\n  wordCount?: number;\n  faqItems?: FAQItem[];\n  tutorialSteps?: TutorialStep[];\n  tutorialMetadata?: TutorialMetadata;\n  videoMetadata?: VideoMetadata;\n  galleryImages?: GalleryImage[];\n  tldr?: {\n    summary: string[];\n    keyTakeaways?: string[];\n  };\n}\n\nexport interface BlogMetadata {\n  slug: string;\n  title: string;\n  excerpt: string;\n  date: string;\n  author: string;\n  tags: string[];\n  image?: string;\n  galleryImages?: GalleryImage[];\n  rating?: Rating;\n  readTime: number | string;\n  imageAlt?: string;\n  category?: string;\n}\n"
  },
  {
    "path": "src/content/metadata/christmas-nail-designs-2025.json",
    "content": "{\n  \"title\": \"Christmas Nails 2025: 50+ Festive Designs from Classic to Chrome\",\n  \"excerpt\": \"Discover 50+ stunning Christmas nail designs for 2025. From timeless red and green to trending chrome finishes, find your perfect festive manicure with expert tips for long-lasting holiday nails.\",\n  \"date\": \"2025-10-07T14:30:00-04:00\",\n  \"updatedDate\": \"2025-10-24T10:00:00-04:00\",\n  \"author\": \"Mirell\u00e9 Team\",\n  \"category\": \"Seasonal Nail Trends\",\n  \"tags\": [\n    \"christmas nails\",\n    \"holiday nail art\",\n    \"festive nail designs\",\n    \"winter nails\",\n    \"seasonal trends\"\n  ],\n  \"image\": \"/images/blog/hero-christmas-nails-2025.jpg\",\n  \"imageAlt\": \"Christmas nails 2025 featuring festive red, green, and chrome designs for holiday season\",\n  \"imageWidth\": 1200,\n  \"imageHeight\": 630,\n  \"readTime\": \"12 min\",\n  \"wordCount\": 4200,\n  \"canonical\": \"https://mirelleinspo.com/blog/christmas-nails-2025\",\n  \"dateModified\": \"2025-10-24\",\n  \"rating\": {\n    \"value\": 4.9,\n    \"count\": 287\n  },\n  \"galleryImages\": [\n    {\n      \"url\": \"/images/blog/christmas-colors-2025.png\",\n      \"alt\": \"Modern Christmas nail color palette featuring burgundy sage green and rose gold chrome\",\n      \"width\": 1200,\n      \"height\": 800,\n      \"caption\": \"2025's most sophisticated Christmas color combinations\"\n    },\n    {\n      \"url\": \"/images/blog/christmas-shapes-2025.png\",\n      \"alt\": \"Christmas nail designs on different nail shapes almond square round coffin\",\n      \"width\": 1200,\n      \"height\": 800,\n      \"caption\": \"Festive designs tailored for every nail shape\"\n    },\n    {\n      \"url\": \"/images/blog/christmas-tutorial-2025.png\",\n      \"alt\": \"Step by step red and gold Christmas nails with chrome accent tutorial\",\n      \"width\": 1200,\n      \"height\": 800,\n      \"caption\": \"Classic red and gold Christmas manicure technique\"\n    }\n  ]\n}"
  }
]
