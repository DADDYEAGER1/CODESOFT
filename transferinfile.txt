[
  {
    "path": "next.config.ts",
    "content": "\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  \n  // Image Optimization\n  images: {\n    formats: ['image/avif', 'image/webp'],\n    minimumCacheTTL: 31536000, // 1 year\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: '**',\n      },\n    ],\n  },\n  // Headers for SEO and Security\n  async headers() {\n    return [\n      {\n        source: \"/:path*\",\n        headers: [\n          {\n            key: \"X-Content-Type-Options\",\n            value: \"nosniff\",\n          },\n          {\n            key: \"X-Frame-Options\",\n            value: \"SAMEORIGIN\",\n          },\n          {\n            key: \"X-XSS-Protection\",\n            value: \"1; mode=block\",\n          },\n          {\n            key: \"Referrer-Policy\",\n            value: \"strict-origin-when-cross-origin\",\n          },\n          {\n            key: \"Permissions-Policy\",\n            value: \"camera=(), microphone=(), geolocation=()\",\n          },\n        ],\n      },\n    ];\n  },\n\n\n  // Rewrites for clean URLs\n  async rewrites() {\n    return {\n      beforeFiles: [\n        {\n          source: \"/sitemap.xml\",\n          destination: \"/api/sitemap\",\n        },\n      ],\n    };\n  },\n\n  // Enable SWR (Stale While Revalidate) for ISR\n  onDemandEntries: {\n    maxInactiveAge: 25 * 1000,\n    pagesBufferLength: 5,\n  },\n\n  // Compression\n  compress: true,\n\n  // Generate ETags for better caching\n  generateEtags: true,\n\n  // Trailing slashes for consistency\n  trailingSlash: false,\n\n  // React strict mode for better error detection\n  reactStrictMode: true,\n\n  // Optimized builds\n  optimizeFonts: true,\n  optimizePackageImports: [\n    \"@chakra-ui/react\",\n    \"@headlessui/react\",\n    \"date-fns\",\n  ],\n\n  // Experimental features for better performance\n  experimental: {\n    optimizePackageImports: [\"lodash-es\"],\n  },\n};\n\nexport default nextConfig;\n"
  },
  {
    "path": "src/app/blog/[slug]/page.tsx",
    "content": "import { notFound } from 'next/navigation';\nimport { getBlogPost, getAllBlogSlugs } from '@/lib/blog';\nimport BlogPost from '@/components/Blog/BlogPost';\nimport Breadcrumbs from '@/components/Breadcrumbs';\nimport RelatedPosts from '@/components/Blog/RelatedPosts'; // \u2705 NEW - Import RelatedPosts component\nimport type { Metadata } from 'next';\nimport { generateSchemas } from '@/lib/generateSchemas';\n\ninterface PageProps {\n  params: {\n    slug: string;\n  };\n}\n\nexport async function generateStaticParams() {\n  const slugs = await getAllBlogSlugs();\n  return slugs.map((slug) => ({\n    slug: slug,\n  }));\n}\n\nexport async function generateMetadata({ params }: PageProps): Promise<Metadata> {\n  const { slug } = params;\n  const post = await getBlogPost(slug);\n  \n  if (!post) {\n    return {\n      title: 'Post Not Found - Mirelle',\n      description: 'The blog post you are looking for does not exist.',\n      robots: {\n        index: false,\n        follow: false,\n      },\n    };\n  }\n\n  const canonicalUrl = `https://mirelleinspo.com/blog/${slug}`;\n  const imageUrl = post.image ? `https://mirelleinspo.com${post.image}` : 'https://mirelleinspo.com/og-default.png';\n  const imageAltText = post.imageAlt || post.title;\n  \n  return {\n    title: `${post.title} | Mirelle`,\n    description: post.excerpt || `Discover ${post.title} - expert nail tips, trends, and tutorials from Mirelle.`,\n    keywords: post.tags?.join(', ') || 'nail art, nail care, nail trends, manicure tips, nail design',\n    authors: [{ name: post.author || 'Mirelle' }],\n    creator: post.author || 'Mirelle',\n    publisher: 'Mirelle',\n    alternates: {\n      canonical: canonicalUrl,\n    },\n    robots: {\n      index: true,\n      follow: true,\n      googleBot: {\n        index: true,\n        follow: true,\n        'max-video-preview': -1,\n        'max-image-preview': 'large',\n        'max-snippet': -1,\n      },\n    },\n    openGraph: {\n      title: `${post.title} | Mirelle`,\n      description: post.excerpt || `Discover ${post.title} - expert nail inspiration from Mirelle.`,\n      type: 'article',\n      url: canonicalUrl,\n      siteName: 'Mirelle',\n      locale: 'en_US',\n      images: [{\n        url: imageUrl,\n        width: post.imageWidth || 1200,\n        height: post.imageHeight || 630,\n        alt: post.title,\n        type: 'image/jpeg',\n      }],\n      publishedTime: post.date,\n      modifiedTime: post.updatedDate || post.date,\n      authors: [post.author || 'Mirelle'],\n      section: post.category || 'Nail Care',\n      tags: post.tags || [],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: `${post.title} | Mirelle`,\n      description: post.excerpt || `Discover ${post.title} - expert nail inspiration from Mirelle.`,\n      images: [imageUrl],\n      creator: '@mirelleinspo',\n      site: '@mirelleinspo',\n    },\n    other: {\n      'article:published_time': post.date,\n      'article:modified_time': post.dateModified || post.updatedDate || post.date,\n      'article:author': post.author || 'Mirelle',\n      'article:section': post.category || 'Nail Care',\n      'article:tag': post.tags?.join(', ') || '',\n    },\n  };\n}\n\nexport default async function BlogPostPage({ params }: PageProps) {\n  const { slug } = params;\n  const post = await getBlogPost(slug);\n  \n  if (!post) notFound();\n\n  // \u2705 UPDATED: Pass galleryImages to schema generator\n  const schemas = generateSchemas({\n    post,\n    slug: params.slug,\n    faqItems: post.faqItems,\n    tutorialSteps: post.tutorialSteps,\n    tutorialMetadata: post.tutorialMetadata,\n    galleryImages: post.galleryImages,  // \u2705 NEW: Pass gallery images\n  });\n  \n\n  return (\n    <>\n      {/* Core Structured Data */}\n      <script \n        type=\"application/ld+json\" \n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.articleSchema) }} \n      />\n      <script \n        type=\"application/ld+json\" \n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.breadcrumbSchema) }} \n      />\n      <script \n        type=\"application/ld+json\" \n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.websiteSchema) }} \n      />\n      <script \n        type=\"application/ld+json\" \n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.organizationSchema) }} \n      />\n      \n      {/* Conditional Structured Data */}\n      {schemas.faqSchema && (\n        <script \n          type=\"application/ld+json\" \n          dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.faqSchema) }} \n        />\n      )}\n      {schemas.howToSchema && (\n        <script \n          type=\"application/ld+json\" \n          dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.howToSchema) }} \n        />\n      )}\n      {schemas.videoSchema && (\n        <script \n          type=\"application/ld+json\" \n          dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.videoSchema) }} \n        />\n      )}\n      {/* \u2705 NEW: Add image gallery schema */}\n      {schemas.imageGallerySchema && (\n        <script \n          type=\"application/ld+json\" \n          dangerouslySetInnerHTML={{ __html: JSON.stringify(schemas.imageGallerySchema) }} \n        />\n      )}\n      \n      {/* Breadcrumbs */}\n      <Breadcrumbs \n        items={[{ label: 'Blog', href: '/blog' }]} \n        currentPage={post.title} \n      />\n      \n      {/* Main Blog Post Content */}\n      <BlogPost post={post} />\n\n      {/* \u2705 NEW - Related Posts Section */}\n      <section className=\"bg-gray-50 py-12\">\n        <div className=\"container mx-auto px-4\">\n          <RelatedPosts currentSlug={slug} />\n        </div>\n      </section>\n    </>\n  );\n}\n"
  },
  {
    "path": "src/app/blog/category/[category]/page.tsx",
    "content": "import { Metadata } from 'next';\nimport { notFound } from 'next/navigation';\nimport { getPostsByCategory, getAllCategories } from '@/lib/blog';\nimport BlogCard from '@/components/Blog/BlogCard';\nimport Breadcrumbs from '@/components/Breadcrumbs';\n\ninterface PageProps {\n  params: {\n    category: string;\n  };\n  searchParams: {\n    page?: string;\n  };\n}\n\n// \u2705 Generate static params for all categories\nexport async function generateStaticParams() {\n  const categories = await getAllCategories();\n  return categories.map((category) => ({\n    category: category.slug,\n  }));\n}\n\n// \u2705 Generate metadata for category pages\nexport async function generateMetadata({ params }: PageProps): Promise<Metadata> {\n  const { category } = params;\n  const posts = await getPostsByCategory(category);\n  const categories = await getAllCategories();\n  const categoryData = categories.find(cat => cat.slug === category); // \u2705 FIXED: Changed from cat.slug to cat.name\n\n  if (!categoryData || posts.length === 0) {\n    return {\n      title: 'Category Not Found - Mirelle',\n      description: 'The category you are looking for does not exist.',\n      robots: {\n        index: false,\n        follow: false,\n      },\n    };\n  }\n\n  const canonicalUrl = `https://mirelleinspo.com/blog/category/${category}`;\n  \n  return {\n    title: `${categoryData.name} - Nail Care Articles | Mirelle`,\n    description: `Explore ${posts.length} expert articles about ${categoryData.name}. Professional nail care tips, trends, and tutorials curated by Mirelle.`, // \u2705 FIXED: Removed categoryData.excerpt\n    keywords: `${categoryData.name}, nail care, nail art, nail trends, ${categoryData.name.toLowerCase()} tips, manicure, beauty blog`,\n    authors: [{ name: 'Mirelle' }],\n    creator: 'Mirelle',\n    publisher: 'Mirelle',\n    alternates: {\n      canonical: canonicalUrl,\n    },\n    robots: {\n      index: true,\n      follow: true,\n      googleBot: {\n        index: true,\n        follow: true,\n        'max-video-preview': -1,\n        'max-image-preview': 'large',\n        'max-snippet': -1,\n      },\n    },\n    openGraph: {\n      title: `${categoryData.name} - Nail Care Articles | Mirelle`,\n      description: `Explore ${posts.length} expert articles about ${categoryData.name}`, // \u2705 FIXED: Removed categoryData.excerpt\n      type: 'website',\n      url: canonicalUrl,\n      siteName: 'Mirelle',\n      locale: 'en_US',\n      images: [{\n        url: 'https://mirelleinspo.com/blog-category.jpg',\n        width: 1200,\n        height: 630,\n        alt: `${categoryData.name} articles on Mirelle`,\n        type: 'image/jpeg',\n      }],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: `${categoryData.name} Articles | Mirelle`,\n      description: `Explore expert ${categoryData.name} articles`, // \u2705 FIXED: Removed categoryData.excerpt\n      images: ['https://mirelleinspo.com/blog-category.jpg'],\n      creator: '@mirelleinspo',\n      site: '@mirelleinspo',\n    },\n  };\n}\n\nexport default async function CategoryPage({ params, searchParams }: PageProps) {\n  const { category } = params;\n  const currentPage = Number(searchParams.page) || 1;\n  const postsPerPage = 12;\n\n  // Get all posts in this category\n  const allPosts = await getPostsByCategory(category);\n  const categories = await getAllCategories();\n  const categoryData = categories.find(cat => cat.slug === category); // \u2705 FIXED: Changed from cat.slug to cat.name\n\n  if (!categoryData || allPosts.length === 0) {\n    notFound();\n  }\n\n  // Calculate pagination\n  const totalPages = Math.ceil(allPosts.length / postsPerPage);\n  const startIndex = (currentPage - 1) * postsPerPage;\n  const endIndex = startIndex + postsPerPage;\n  const paginatedPosts = allPosts.slice(startIndex, endIndex);\n\n  // \u2705 Breadcrumb structured data\n  const breadcrumbSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: [\n      {\n        '@type': 'ListItem',\n        position: 1,\n        name: 'Home',\n        item: 'https://mirelleinspo.com',\n      },\n      {\n        '@type': 'ListItem',\n        position: 2,\n        name: 'Blog',\n        item: 'https://mirelleinspo.com/blog',\n      },\n      {\n        '@type': 'ListItem',\n        position: 3,\n        name: categoryData.name,\n        item: `https://mirelleinspo.com/blog/category/${category}`,\n      },\n    ],\n  };\n\n  // \u2705 Collection page structured data\n  const collectionSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'CollectionPage',\n    name: `${categoryData.name} Articles`,\n    description: `Collection of ${allPosts.length} articles about ${categoryData.name}`, // \u2705 FIXED: Removed categoryData.excerpt\n    url: `https://mirelleinspo.com/blog/category/${category}`,\n    about: {\n      '@type': 'Thing',\n      name: categoryData.name,\n    },\n    numberOfItems: allPosts.length,\n  };\n\n  return (\n    <>\n      {/* Structured Data */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbSchema) }}\n      />\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(collectionSchema) }}\n      />\n\n      <div className=\"min-h-screen\">\n        {/* Breadcrumbs */}\n        <Breadcrumbs \n          items={[{ label: 'Blog', href: '/blog' }]} \n          currentPage={categoryData.name}\n        />\n\n        {/* Hero Section */}\n        <section className=\"relative bg-gradient-to-r from-pink-200 to-purple-200 py-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <h1 className=\"text-4xl md:text-5xl font-bold text-gray-800 mb-4\">\n                {categoryData.name}\n              </h1>\n              <p className=\"text-xl text-gray-600 mb-6\">\n                {/* \u2705 FIXED: Removed conditional rendering since excerpt doesn't exist */}\n                Discover expert articles and insights about {categoryData.name}\n              </p>\n              <div className=\"flex items-center justify-center gap-2 text-gray-700\">\n                <span className=\"text-2xl\">\ud83d\udcdd</span>\n                <span className=\"font-semibold\">\n                  {allPosts.length} {allPosts.length === 1 ? 'Article' : 'Articles'}\n                </span>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Posts Grid */}\n        <section className=\"py-16 bg-white\">\n          <div className=\"container mx-auto px-4\">\n            {paginatedPosts.length > 0 ? (\n              <>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n                  {paginatedPosts.map((post) => (\n                    <BlogCard key={post.slug} post={post} />\n                  ))}\n                </div>\n\n                {/* Pagination */}\n                {totalPages > 1 && (\n                  <div className=\"flex justify-center items-center gap-2 mt-12\">\n                    {/* Previous Button */}\n                    {currentPage > 1 && (\n                      <a\n                        href={`/blog/category/${category}?page=${currentPage - 1}`}\n                        className=\"px-4 py-2 bg-pink-600 text-white rounded-lg hover:bg-pink-700 transition-colors\"\n                      >\n                        \u2190 Previous\n                      </a>\n                    )}\n\n                    {/* Page Numbers */}\n                    <div className=\"flex gap-2\">\n                      {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                        <a\n                          key={page}\n                          href={`/blog/category/${category}?page=${page}`}\n                          className={`px-4 py-2 rounded-lg transition-colors ${\n                            page === currentPage\n                              ? 'bg-pink-600 text-white'\n                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                          }`}\n                        >\n                          {page}\n                        </a>\n                      ))}\n                    </div>\n\n                    {/* Next Button */}\n                    {currentPage < totalPages && (\n                      <a\n                        href={`/blog/category/${category}?page=${currentPage + 1}`}\n                        className=\"px-4 py-2 bg-pink-600 text-white rounded-lg hover:bg-pink-700 transition-colors\"\n                      >\n                        Next \u2192\n                      </a>\n                    )}\n                  </div>\n                )}\n              </>\n            ) : (\n              <div className=\"text-center py-16\">\n                <h3 className=\"text-2xl font-bold text-gray-600 mb-4\">\n                  No articles found in this category\n                </h3>\n                <a\n                  href=\"/blog\"\n                  className=\"text-pink-600 hover:text-pink-700 underline\"\n                >\n                  \u2190 Back to all articles\n                </a>\n              </div>\n            )}\n          </div>\n        </section>\n\n        {/* Other Categories Section */}\n        <section className=\"py-16 bg-gray-50\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-800\">\n              Explore Other Categories\n            </h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 max-w-5xl mx-auto\">\n              {categories\n                .filter(cat => cat.name !== category) // \u2705 FIXED: Changed from cat.slug to cat.name\n                .map((cat) => (\n                  <a\n                    key={cat.name} // \u2705 FIXED: Changed from cat.slug to cat.name\n                    href={`/blog/category/${cat.name}`} // \u2705 FIXED: Changed from cat.slug to cat.name\n                    className=\"bg-white p-6 rounded-lg text-center hover:shadow-lg transition-shadow border border-gray-100 hover:border-pink-300\"\n                  >\n                    <h3 className=\"font-semibold text-gray-800 mb-2\">{cat.name}</h3>\n                    <span className=\"text-sm text-gray-600\">\n                      {cat.count} {cat.count === 1 ? 'article' : 'articles'}\n                    </span>\n                  </a>\n                ))}\n            </div>\n          </div>\n        </section>\n      </div>\n    </>\n  );\n}\n"
  },
  {
    "path": "src/app/blog/tag/[tag]/page.tsx",
    "content": "import { Metadata } from 'next';\nimport { notFound } from 'next/navigation';\nimport { getPostsByTag, getAllTags } from '@/lib/blog';\nimport BlogCard from '@/components/Blog/BlogCard';\nimport Breadcrumbs from '@/components/Breadcrumbs';\n\ninterface PageProps {\n  params: {\n    tag: string;\n  };\n  searchParams: {\n    page?: string;\n  };\n}\n\n// \u2705 NEW - Generate static params for all tags\nexport async function generateStaticParams() {\n  const tags = await getAllTags();\n  return tags.map((tag) => ({\n    tag: tag.slug,\n  }));\n}\n\n// \u2705 NEW - Generate metadata for tag pages\nexport async function generateMetadata({ params }: PageProps): Promise<Metadata> {\n  const { tag } = params;\n  const posts = await getPostsByTag(tag);\n  const tags = await getAllTags();\n  const tagData = tags.find(t => t.slug === tag);\n\n  if (!tagData || posts.length === 0) {\n    return {\n      title: 'Tag Not Found - Mirelle',\n      description: 'The tag you are looking for does not exist.',\n      robots: {\n        index: false,\n        follow: false,\n      },\n    };\n  }\n\n  const canonicalUrl = `https://mirelleinspo.com/blog/tag/${tag}`;\n  const tagName = tagData.name;\n  \n  return {\n    title: `${tagName} - Nail Care Articles | Mirelle`,\n    description: `Discover ${posts.length} expert articles tagged with ${tagName}. Professional nail care tips, trends, and tutorials curated by Mirelle.`,\n    keywords: `${tagName}, nail care, nail art, nail trends, ${tagName.toLowerCase()}, manicure, beauty blog`,\n    authors: [{ name: 'Mirelle' }],\n    creator: 'Mirelle',\n    publisher: 'Mirelle',\n    alternates: {\n      canonical: canonicalUrl,\n    },\n    robots: {\n      index: true,\n      follow: true,\n      googleBot: {\n        index: true,\n        follow: true,\n        'max-video-preview': -1,\n        'max-image-preview': 'large',\n        'max-snippet': -1,\n      },\n    },\n    openGraph: {\n      title: `${tagName} - Nail Care Articles | Mirelle`,\n      description: `Discover ${posts.length} expert articles tagged with ${tagName}`,\n      type: 'website',\n      url: canonicalUrl,\n      siteName: 'Mirelle',\n      locale: 'en_US',\n      images: [{\n        url: 'https://mirelleinspo.com/blog-tag.jpg',\n        width: 1200,\n        height: 630,\n        alt: `${tagName} articles on Mirelle`,\n        type: 'image/jpeg',\n      }],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: `${tagName} Articles | Mirelle`,\n      description: `Discover expert ${tagName} articles`,\n      images: ['https://mirelleinspo.com/blog-tag.jpg'],\n      creator: '@mirelleinspo',\n      site: '@mirelleinspo',\n    },\n  };\n}\n\nexport default async function TagPage({ params, searchParams }: PageProps) {\n  const { tag } = params;\n  const currentPage = Number(searchParams.page) || 1;\n  const postsPerPage = 12;\n\n  const allPosts = await getPostsByTag(tag);\n  const tags = await getAllTags();\n  const tagData = tags.find(t => t.slug === tag);\n\n  if (!tagData || allPosts.length === 0) {\n    notFound();\n  }\n\n  // Calculate pagination\n  const totalPages = Math.ceil(allPosts.length / postsPerPage);\n  const startIndex = (currentPage - 1) * postsPerPage;\n  const endIndex = startIndex + postsPerPage;\n  const paginatedPosts = allPosts.slice(startIndex, endIndex);\n\n  // \u2705 NEW - Breadcrumb structured data\n  const breadcrumbSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: [\n      {\n        '@type': 'ListItem',\n        position: 1,\n        name: 'Home',\n        item: 'https://mirelleinspo.com',\n      },\n      {\n        '@type': 'ListItem',\n        position: 2,\n        name: 'Blog',\n        item: 'https://mirelleinspo.com/blog',\n      },\n      {\n        '@type': 'ListItem',\n        position: 3,\n        name: `#${tagData.name}`,\n        item: `https://mirelleinspo.com/blog/tag/${tag}`,\n      },\n    ],\n  };\n\n  // \u2705 NEW - Collection page structured data\n  const collectionSchema = {\n    '@context': 'https://schema.org',\n    '@type': 'CollectionPage',\n    name: `${tagData.name} Articles`,\n    description: `Collection of ${allPosts.length} articles tagged with ${tagData.name}`,\n    url: `https://mirelleinspo.com/blog/tag/${tag}`,\n    about: {\n      '@type': 'Thing',\n      name: tagData.name,\n    },\n    numberOfItems: allPosts.length,\n  };\n\n  return (\n    <>\n      {/* Structured Data */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(breadcrumbSchema) }}\n      />\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(collectionSchema) }}\n      />\n\n      <div className=\"min-h-screen\">\n        {/* Breadcrumbs */}\n        <Breadcrumbs \n          items={[{ label: 'Blog', href: '/blog' }]} \n          currentPage={`#${tagData.name}`}\n        />\n\n        {/* Hero Section */}\n        <section className=\"relative bg-gradient-to-r from-purple-200 to-pink-200 py-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <div className=\"inline-block bg-white px-6 py-3 rounded-full mb-4 shadow-md\">\n                <span className=\"text-3xl font-bold text-gray-800\">#{tagData.name}</span>\n              </div>\n              <p className=\"text-xl text-gray-600 mb-6\">\n                Explore articles tagged with <strong>{tagData.name}</strong>\n              </p>\n              <div className=\"flex items-center justify-center gap-2 text-gray-700\">\n                <span className=\"text-2xl\">\ud83d\udcdd</span>\n                <span className=\"font-semibold\">\n                  {allPosts.length} {allPosts.length === 1 ? 'Article' : 'Articles'}\n                </span>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Posts Grid */}\n        <section className=\"py-16 bg-white\">\n          <div className=\"container mx-auto px-4\">\n            {paginatedPosts.length > 0 ? (\n              <>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n                  {paginatedPosts.map((post) => (\n                    <BlogCard key={post.slug} post={post} />\n                  ))}\n                </div>\n\n                {/* Pagination */}\n                {totalPages > 1 && (\n                  <div className=\"flex justify-center items-center gap-2 mt-12\">\n                    {/* Previous Button */}\n                    {currentPage > 1 && (\n                      <a\n                        href={`/blog/tag/${tag}?page=${currentPage - 1}`}\n                        className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n                      >\n                        \u2190 Previous\n                      </a>\n                    )}\n\n                    {/* Page Numbers */}\n                    <div className=\"flex gap-2\">\n                      {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                        <a\n                          key={page}\n                          href={`/blog/tag/${tag}?page=${page}`}\n                          className={`px-4 py-2 rounded-lg transition-colors ${\n                            page === currentPage\n                              ? 'bg-purple-600 text-white'\n                              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                          }`}\n                        >\n                          {page}\n                        </a>\n                      ))}\n                    </div>\n\n                    {/* Next Button */}\n                    {currentPage < totalPages && (\n                      <a\n                        href={`/blog/tag/${tag}?page=${currentPage + 1}`}\n                        className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n                      >\n                        Next \u2192\n                      </a>\n                    )}\n                  </div>\n                )}\n              </>\n            ) : (\n              <div className=\"text-center py-16\">\n                <h3 className=\"text-2xl font-bold text-gray-600 mb-4\">\n                  No articles found with this tag\n                </h3>\n                <a\n                  href=\"/blog\"\n                  className=\"text-purple-600 hover:text-purple-700 underline\"\n                >\n                  \u2190 Back to all articles\n                </a>\n              </div>\n            )}\n          </div>\n        </section>\n\n        {/* Popular Tags Section */}\n        <section className=\"py-16 bg-gray-50\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-800\">\n              Explore Other Tags\n            </h2>\n            <div className=\"flex flex-wrap justify-center gap-3 max-w-5xl mx-auto\">\n              {tags\n                .filter(t => t.slug !== tag)\n                .slice(0, 20)\n                .map((t) => (\n                  <a\n                    key={t.slug}\n                    href={`/blog/tag/${t.slug}`}\n                    className=\"bg-white px-4 py-2 rounded-full text-sm font-medium text-gray-700 hover:bg-purple-100 hover:text-purple-700 transition-colors border border-gray-200 hover:border-purple-300\"\n                  >\n                    #{t.name} ({t.count})\n                  </a>\n                ))}\n            </div>\n          </div>\n        </section>\n      </div>\n    </>\n  );\n}\n"
  },
  {
    "path": "lib/blog.ts",
    "content": "<Error reading file: [Errno 2] No such file or directory: 'C:\\\\Users\\\\gaurav verma\\\\mirelle-site\\\\lib\\\\blog.ts'>"
  }
]
