[
  {
    "path": "src/components/Shop/ShopClient.tsx",
    "content": "'use client';\n\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { ArrowLeft, ChevronDown, ChevronUp } from 'lucide-react';\nimport type { CategoryData, Product } from '@/types/shop';\nimport { calculateDiscount } from '@/lib/shop';\n\ninterface ShopClientProps {\n  categoryData: CategoryData;\n  initialProducts: Product[];\n  faqs?: Array<{ question: string; answer: string; keywords?: string[] }>;\n  description?: {\n    html: string;\n    perfectFor?: string[];\n  } | null;\n}\n\nexport default function ShopClient({\n  categoryData,\n  initialProducts,\n  faqs = [],\n  description = null,\n}: ShopClientProps) {\n  const [filter, setFilter] = useState<'all' | 'new' | 'trending' | 'sale'>('all');\n  const [showAll, setShowAll] = useState(false);\n  const [openFaqIndex, setOpenFaqIndex] = useState<number | null>(null);\n\n  const filteredProducts = initialProducts.filter((product) => {\n    if (filter === 'all') return true;\n    if (filter === 'new') return product.isNew;\n    if (filter === 'trending') return product.isTrending;\n    if (filter === 'sale') return product.originalPrice !== product.price;\n    return true;\n  });\n\n  const displayProducts = showAll ? filteredProducts : filteredProducts.slice(0, 15);\n  const hasMore = filteredProducts.length > 15 && !showAll;\n\n  const toggleFaq = (index: number) => {\n    setOpenFaqIndex(openFaqIndex === index ? null : index);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-white\">\n      <div className=\"max-w-7xl mx-auto px-4 pt-6\">\n        <Link\n          href=\"/shop\"\n          className=\"inline-flex items-center text-gray-600 hover:text-gray-900 transition-colors\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Shop\n        </Link>\n      </div>\n\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden\">\n        <div\n          className={`absolute inset-0 bg-gradient-to-br from-${categoryData.gradientFrom} via-${categoryData.gradientVia} to-${categoryData.gradientTo} opacity-90`}\n        />\n        <div className=\"relative max-w-7xl mx-auto px-4 py-16 sm:py-24\">\n          <div className=\"text-center\">\n            {categoryData.emojis && categoryData.emojis.length > 0 && (\n              <div className=\"absolute inset-0 pointer-events-none\">\n                {categoryData.emojis.map((emoji, i) => (\n                  <span\n                    key={i}\n                    className=\"absolute text-4xl sm:text-6xl opacity-20 animate-float\"\n                    style={{\n                      left: `${(i * 25) % 100}%`,\n                      top: `${(i * 30) % 100}%`,\n                      animationDelay: `${i * 0.5}s`,\n                    }}\n                  >\n                    {emoji}\n                  </span>\n                ))}\n              </div>\n            )}\n\n            <h1 className=\"text-5xl sm:text-6xl font-bold text-white mb-6 drop-shadow-lg\">\n              {categoryData.displayName} {categoryData.year}\n            </h1>\n            <p className=\"text-xl sm:text-2xl text-white/90 max-w-3xl mx-auto drop-shadow-md\">\n              {categoryData.description}\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* TL;DR Section */}\n      {categoryData.tldr && (\n        <section className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"bg-gradient-to-br from-pink-50 to-purple-50 border-l-4 border-pink-500 p-6 rounded-lg shadow-md\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <span className=\"text-2xl\">\u26a1</span>\n              <h2 className=\"text-xl font-bold text-gray-900 font-serif\">Quick Collection Overview</h2>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <ul className=\"space-y-2\">\n                {categoryData.tldr.summary.map((item, index) => (\n                  <li key={index} className=\"flex items-start gap-2\">\n                    <span className=\"text-pink-500 mt-1\">\u2713</span>\n                    <span className=\"text-gray-700\">{item}</span>\n                  </li>\n                ))}\n              </ul>\n              \n              {categoryData.tldr.keyTakeaways && categoryData.tldr.keyTakeaways.length > 0 && (\n                <div className=\"mt-4 pt-4 border-t border-pink-200\">\n                  <p className=\"text-gray-700 font-medium mb-2\">Key Features:</p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {categoryData.tldr.keyTakeaways.map((takeaway, index) => (\n                      <span \n                        key={index} \n                        className=\"bg-pink-100 text-pink-700 px-3 py-1 rounded-full text-sm font-medium\"\n                      >\n                        {takeaway}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* SEO Description */}\n      {description && (\n        <section className=\"max-w-4xl mx-auto px-4 py-12\">\n          <div className=\"prose prose-lg max-w-none\">\n            <div\n              dangerouslySetInnerHTML={{ __html: description.html }}\n              className=\"text-gray-700 leading-relaxed\"\n            />\n            {description.perfectFor && description.perfectFor.length > 0 && (\n              <div className=\"mt-6 p-4 bg-blue-50 rounded-lg border border-blue-100\">\n                <p className=\"font-semibold text-gray-900 mb-2\">Perfect for:</p>\n                <p className=\"text-gray-700 text-sm\">\n                  {description.perfectFor.join(', ')}\n                </p>\n              </div>\n            )}\n          </div>\n        </section>\n      )}\n\n      {/* Filter Bar */}\n      <section className=\"max-w-7xl mx-auto px-4 py-8\">\n        <div className=\"flex flex-wrap gap-3 justify-center\">\n          {[\n            { key: 'all', label: 'All Products' },\n            { key: 'new', label: 'New Arrivals' },\n            { key: 'trending', label: 'Trending' },\n            { key: 'sale', label: 'On Sale' },\n          ].map((item) => (\n            <button\n              key={item.key}\n              onClick={() => setFilter(item.key as any)}\n              className={`px-6 py-2.5 rounded-full font-medium transition-all ${\n                filter === item.key\n                  ? 'bg-gray-900 text-white shadow-lg scale-105'\n                  : 'bg-white text-gray-700 hover:bg-gray-100 shadow'\n              }`}\n            >\n              {item.label}\n            </button>\n          ))}\n        </div>\n        <p className=\"text-center mt-4 text-gray-600\">\n          Showing {displayProducts.length} of {filteredProducts.length} products\n        </p>\n      </section>\n\n      {/* Products Grid */}\n      <section className=\"max-w-7xl mx-auto px-4 pb-12\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n          {displayProducts.map((product) => {\n            const discount = calculateDiscount(product.originalPrice, product.price);\n\n            return (\n              <a\n                key={product.id}\n                href={product.affiliateUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer sponsored\"\n                className=\"group bg-white rounded-xl shadow-md hover:shadow-2xl transition-all duration-300 overflow-hidden\"\n              >\n                <div className=\"relative aspect-square overflow-hidden bg-gray-100\">\n                  <img\n                    src={product.image}\n                    alt={product.description || product.name}\n                    className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-300\"\n                  />\n                  <div className=\"absolute top-2 left-2 flex flex-col gap-1\">\n                    {product.isNew && (\n                      <span className=\"px-2 py-1 bg-blue-500 text-white text-xs font-bold rounded\">\n                        NEW\n                      </span>\n                    )}\n                    {product.isTrending && (\n                      <span className=\"px-2 py-1 bg-purple-500 text-white text-xs font-bold rounded\">\n                        TRENDING\n                      </span>\n                    )}\n                    {product.stockStatus === 'low-stock' && (\n                      <span className=\"px-2 py-1 bg-orange-500 text-white text-xs font-bold rounded\">\n                        LOW STOCK\n                      </span>\n                    )}\n                    {discount > 0 && (\n                      <span className=\"px-2 py-1 bg-red-500 text-white text-xs font-bold rounded\">\n                        {discount}% OFF\n                      </span>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"p-4\">\n                  <h3 className=\"font-semibold text-gray-900 mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors\">\n                    {product.name}\n                  </h3>\n                  <div className=\"flex items-center gap-2\">\n                    {product.originalPrice !== product.price ? (\n                      <>\n                        <span className=\"text-xl font-bold text-red-600\">\n                          {product.price}\n                        </span>\n                        <span className=\"text-sm text-gray-500 line-through\">\n                          {product.originalPrice}\n                        </span>\n                      </>\n                    ) : (\n                      <span className=\"text-xl font-bold text-gray-900\">\n                        {product.price}\n                      </span>\n                    )}\n                  </div>\n                  {product.rating && (\n                    <div className=\"flex items-center gap-1 mt-2\">\n                      <span className=\"text-yellow-500\">\u2605</span>\n                      <span className=\"text-sm text-gray-600\">{product.rating}</span>\n                    </div>\n                  )}\n                  <button className=\"mt-3 w-full bg-gray-900 text-white py-2 rounded-lg font-medium hover:bg-gray-800 transition-colors\">\n                    {product.cta}\n                  </button>\n                </div>\n              </a>\n            );\n          })}\n        </div>\n\n        {hasMore && (\n          <div className=\"text-center mt-10\">\n            <button\n              onClick={() => setShowAll(true)}\n              className=\"px-8 py-3 bg-gray-900 text-white rounded-full font-medium hover:bg-gray-800 transition-colors shadow-lg hover:shadow-xl\"\n            >\n              Load More Products\n            </button>\n          </div>\n        )}\n      </section>\n\n      {/* FAQ Section */}\n      {faqs && faqs.length > 0 && (\n        <section className=\"max-w-4xl mx-auto px-4 py-16 bg-gray-50\">\n          <h2 className=\"text-3xl font-bold text-center text-gray-900 mb-10\">\n            Frequently Asked Questions\n          </h2>\n          <div className=\"space-y-4\">\n            {faqs.map((faq, index) => (\n              <div\n                key={index}\n                className=\"bg-white rounded-lg shadow-md overflow-hidden\"\n              >\n                <button\n                  onClick={() => toggleFaq(index)}\n                  className=\"w-full px-6 py-4 flex items-center justify-between text-left hover:bg-gray-50 transition-colors\"\n                >\n                  <span className=\"font-semibold text-gray-900 pr-4\">\n                    {faq.question}\n                  </span>\n                  {openFaqIndex === index ? (\n                    <ChevronUp className=\"w-5 h-5 text-gray-500 flex-shrink-0\" />\n                  ) : (\n                    <ChevronDown className=\"w-5 h-5 text-gray-500 flex-shrink-0\" />\n                  )}\n                </button>\n                {openFaqIndex === index && (\n                  <div className=\"px-6 pb-4 pt-2 text-gray-700 leading-relaxed border-t border-gray-100\">\n                    {faq.answer}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </section>\n      )}\n\n      {/* Why Choose Us */}\n      {categoryData.whyChooseUs && categoryData.whyChooseUs.length > 0 && (\n        <section className=\"bg-gradient-to-br from-gray-50 to-white py-16\">\n          <div className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <h2 className=\"text-3xl font-bold text-center text-gray-900 mb-4\">\n              Why Choose Our {categoryData.displayName} Collection?\n            </h2>\n            <p className=\"text-center text-gray-600 mb-10 max-w-2xl mx-auto\">\n              We carefully curate the best press-on nail designs from trusted Amazon sellers\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {categoryData.whyChooseUs.map((benefit, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-start gap-4 bg-white rounded-lg p-6 shadow-sm hover:shadow-md transition-shadow\"\n                >\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-gray-900 to-gray-700 rounded-full flex items-center justify-center\">\n                      <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                      </svg>\n                    </div>\n                  </div>\n                  <p className=\"text-gray-700 flex-1 pt-2\">{benefit}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Related Categories */}\n      {categoryData.relatedCategories && categoryData.relatedCategories.length > 0 && (\n        <section className=\"max-w-7xl mx-auto px-4 py-16 bg-gray-50\">\n          <h2 className=\"text-3xl font-bold text-center text-gray-900 mb-10\">\n            Explore More Collections\n          </h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            {categoryData.relatedCategories.map((relatedSlug) => (\n              <Link\n                key={relatedSlug}\n                href={`/shop/${relatedSlug}`}\n                className=\"group bg-white rounded-xl shadow-md hover:shadow-xl transition-all overflow-hidden\"\n              >\n                <div className=\"aspect-square relative overflow-hidden bg-gray-200 flex items-center justify-center\">\n                  <span className=\"text-5xl\">\ud83d\udc85</span>\n                </div>\n                <div className=\"p-4 text-center\">\n                  <h3 className=\"font-semibold text-gray-900 group-hover:text-blue-600 transition-colors\">\n                    {relatedSlug.split('-').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')} Nails\n                  </h3>\n                </div>\n              </Link>\n            ))}\n          </div>\n        </section>\n      )}\n\n      {/* Trust Signals */}\n      <section className=\"max-w-7xl mx-auto px-4 py-16 border-t border-gray-200\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 text-center\">\n          <div>\n            <div className=\"text-4xl mb-3\">\ud83d\udcaf</div>\n            <h3 className=\"font-semibold text-gray-900 mb-2\">Quality Guaranteed</h3>\n            <p className=\"text-sm text-gray-600\">Premium materials only</p>\n          </div>\n          <div>\n            <div className=\"text-4xl mb-3\">\u26a1</div>\n            <h3 className=\"font-semibold text-gray-900 mb-2\">Easy Application</h3>\n            <p className=\"text-sm text-gray-600\">Salon results in 15 minutes</p>\n          </div>\n          <div>\n            <div className=\"text-4xl mb-3\">\u267b\ufe0f</div>\n            <h3 className=\"font-semibold text-gray-900 mb-2\">Reusable Designs</h3>\n            <p className=\"text-sm text-gray-600\">2-3 applications per set</p>\n          </div>\n        </div>\n      </section>\n\n      {/* Affiliate Disclosure */}\n      <section className=\"max-w-7xl mx-auto px-4 py-8 text-center text-sm text-gray-500\">\n        <p>\n          * As an Amazon Associate, we earn from qualifying purchases. Prices shown are\n          accurate as of publication and may vary.\n        </p>\n      </section>\n\n      <style jsx>{`\n        @keyframes float {\n          0%, 100% {\n            transform: translateY(0px) rotate(0deg);\n          }\n          50% {\n            transform: translateY(-20px) rotate(10deg);\n          }\n        }\n        .animate-float {\n          animation: float 3s ease-in-out infinite;\n        }\n      `}</style>\n    </div>\n  );\n}\n"
  },
  {
    "path": "src/components/BlogSection.tsx",
    "content": "import Link from 'next/link';\nimport Image from 'next/image';\nimport { getAllBlogPosts } from '@/lib/blog';\n\nexport default async function BlogSection() {\n  const posts = await getAllBlogPosts();\n  const recentPosts = posts.slice(0, 6); // Show 6 recent posts in grid\n\n  return (\n    <section className=\"py-16 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold text-gray-800 mb-4\">Latest from Our Blog</h2>\n          <p className=\"text-gray-600 max-w-2xl mx-auto\">\n            Stay updated with expert nail care tips, latest trends, and step-by-step tutorials for beautiful, healthy nails.\n          </p>\n        </div>\n\n        {/* Blog Grid */}\n        {recentPosts.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n            {recentPosts.map((post, index) => (\n              <Link\n                key={post.slug}\n                href={`/blog/${post.slug}`}\n                className={`group block relative rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 cursor-pointer ${\n                  index === 0 ? 'md:col-span-2 md:row-span-2 h-96' : 'h-64'\n                }`}\n              >\n                {/* Background Image */}\n                <div className=\"absolute inset-0\">\n                  {post.image ? (\n                    <Image\n                      src={post.image}\n                      alt={post.title}\n                      fill\n                      className=\"object-cover transition-transform duration-300 group-hover:scale-110\"\n                    />\n                  ) : (\n                    <div className=\"w-full h-full bg-gradient-to-br from-pink-400 via-purple-400 to-indigo-400\" />\n                  )}\n                  <div className=\"absolute inset-0 bg-black/40 group-hover:bg-black/50 transition-colors duration-300\" />\n                </div>\n\n                {/* Content Overlay */}\n                <div className=\"relative h-full p-6 flex flex-col justify-between text-white\">\n                  {/* Tags */}\n                  <div className=\"flex flex-wrap gap-2\">\n                    {post.tags.slice(0, 2).map(tag => (\n                      <span \n                        key={tag}\n                        className=\"bg-white/20 backdrop-blur-sm text-white px-2 py-1 rounded-full text-xs font-medium\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n\n                  {/* Bottom Content */}\n                  <div>\n                    <h3 className={`font-bold mb-2 line-clamp-2 group-hover:text-pink-200 transition-colors ${\n                      index === 0 ? 'text-2xl' : 'text-lg'\n                    }`}>\n                      {post.title}\n                    </h3>\n                    \n                    <p className=\"text-white/90 mb-3 line-clamp-2 text-sm\">\n                      {post.excerpt}\n                    </p>\n\n                    <div className=\"flex justify-between items-center text-xs text-white/80 mb-3\">\n                      <span>{new Date(post.date).toLocaleDateString()}</span>\n                      <span>{post.readTime} min read</span>\n                    </div>\n\n                    <div className=\"inline-flex items-center text-white font-semibold hover:text-pink-200 transition-colors text-sm\">\n                      Read More \u2192\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12 mb-12\">\n            <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">Coming Soon</h3>\n            <p className=\"text-gray-500\">We're crafting amazing content for you. Check back soon!</p>\n          </div>\n        )}\n\n        {/* View All Button */}\n        <div className=\"text-center\">\n          <Link \n            href=\"/blog\"\n            className=\"inline-block bg-pink-500 text-white px-8 py-3 rounded-full font-semibold hover:bg-pink-600 transition-colors duration-300 shadow-lg hover:shadow-xl transform hover:scale-105\"\n          >\n            View All Posts\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n}\n"
  },
  {
    "path": "src/components/ShopSection.tsx",
    "content": "import Link from 'next/link';\n\nconst shopCategories = [\n  {\n    title: \"Halloween Nails\",\n    description: \"Spooky and stylish nail designs for Halloween\",\n    image: \"/halloweenbannerimg.jpg\",\n    href: \"/shop/halloween\",\n    productCount: \"50+ Products\",\n    color: \"from-orange-400 to-red-500\"\n  },\n  {\n    title: \"Winter Nails\",\n    description: \"Cozy and elegant winter nail inspiration\",\n    image: \"/wintersection.jpg\",\n    href: \"/shop/winter\",\n    productCount: \"50+ Products\",\n    color: \"from-blue-400 to-purple-500\"\n  },\n  {\n    title: \"Trendy Nails\",\n    description: \"Latest trending nail designs and colors\",\n    image: \"/trendsection.jpg\",\n    href: \"/shop/trendy\",\n    productCount: \"50+ Products\",\n    color: \"from-pink-400 to-blush-500\",\n    trending: true\n  },\n  {\n    title: \"Christmas Nails\",\n    description: \"Festive holiday nail art for Christmas cheer\",\n    image: \"/christmassection.jpg\",\n    href: \"/shop/christmas\",\n    productCount: \"50+ Products\",\n    color: \"from-red-500 to-green-500\",\n    trending: true\n  },\n  {\n    title: \"Fall Nails\",\n    description: \"Warm autumn colors and cozy fall vibes\",\n    image: \"/fallsection.jpg\",\n    href: \"/shop/fall\",\n    productCount: \"50+ Products\",\n    color: \"from-amber-400 to-orange-600\"\n  },\n  {\n    title: \"New Year Nails\",\n    description: \"Glamorous designs to sparkle into the new year\",\n    image: \"/newyearsection.jpeg\",\n    href: \"/shop/new-year\",\n    productCount: \"50+ Products\",\n    color: \"from-gold-400 to-yellow-500\"\n  }\n];\n\nexport default function ShopSection() {\n  return (\n    <section className=\"py-26 bg-white\">\n      <div className=\"max-w-content mx-auto px-6 sm:px-8 lg:px-12\">\n        {/* Header */}\n        <div className=\"max-w-3xl mb-18\">\n          <p className=\"text-overline text-editorial-accent uppercase tracking-widest mb-4 font-semibold\">\n            Shop\n          </p>\n          <h2 className=\"font-display text-display-md text-editorial-charcoal mb-6 tracking-magazine\">\n            Shop Mirell\u00e9's Favs\n          </h2>\n          <p className=\"text-body-lg text-editorial-slate leading-relaxed font-light\">\n            Discover Mirell\u00e9's curated collection of nail products, tools, and \n            accessories for every season and occasion.\n          </p>\n        </div>\n        \n        {/* Shop Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {shopCategories.map((category, index) => (\n            <Link\n              key={index}\n              href={category.href}\n              className=\"group relative overflow-hidden bg-white shadow-editorial hover:shadow-editorial-lg transition-all duration-500\"\n            >\n              <div className=\"relative h-96\">\n                <img\n                  src={category.image}\n                  alt={category.title}\n                  className=\"w-full h-full object-cover transition-transform duration-700 group-hover:scale-105\"\n                />\n                \n                {/* Editorial gradient overlay */}\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/75 via-black/25 to-transparent\"></div>\n                \n                {/* Product count badge - top right */}\n                <div className=\"absolute top-6 right-6 border border-white/40 backdrop-blur-sm bg-white/20 px-4 py-2 text-caption uppercase tracking-wide font-semibold text-white\">\n                  {category.productCount}\n                </div>\n\n                {/* Trending badge - minimal */}\n                {category.trending && (\n                  <div className=\"absolute top-6 left-6 border border-editorial-accent text-editorial-accent backdrop-blur-sm bg-white/80 px-3 py-1 text-caption uppercase tracking-widest font-semibold\">\n                    Trending\n                  </div>\n                )}\n              </div>\n              \n              {/* Content overlay */}\n              <div className=\"absolute bottom-0 left-0 right-0 p-8 text-white\">\n                <h3 className=\"font-display text-headline-lg mb-3 text-white tracking-magazine\">\n                  {category.title}\n                </h3>\n                <p className=\"text-white/90 mb-6 text-body font-sans font-light leading-relaxed\">\n                  {category.description}\n                </p>\n                <div className=\"inline-flex items-center text-white border-b border-white/50 pb-1 text-body-sm font-sans uppercase tracking-wide font-medium group-hover:border-editorial-accent group-hover:text-editorial-accent transition-all duration-300\">\n                  <span className=\"mr-2\">Shop Now</span>\n                  <svg \n                    className=\"w-4 h-4 transform group-hover:translate-x-1 transition-transform duration-300\" \n                    fill=\"none\" \n                    stroke=\"currentColor\" \n                    viewBox=\"0 0 24 24\"\n                    strokeWidth={2}\n                  >\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M17 8l4 4m0 0l-4 4m4-4H3\" />\n                  </svg>\n                </div>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n"
  },
  {
    "path": "src/components/FeaturedTopicsSection.tsx",
    "content": "import Link from 'next/link';\n\nconst topics = [\n  {\n    title: \"Nail Care Guide\",\n    description: \"Essential tips for healthy, beautiful nails\",\n    image: \"/nailcare.jpg\",\n    href: \"/topics/nail-care-guide\",\n    color: \"from-nude-400 to-nude-600\"\n  },\n  {\n    title: \"For Skin Tones\",\n    description: \"Find the perfect nail colors for your skin tone\",\n    image: \"/skintone.jpg\",\n    href: \"/topics/skin-tones\",\n    color: \"from-blush-400 to-blush-600\",\n    trending: true\n  },\n  {\n    title: \"Nail Art Guides\",\n    description: \"Step-by-step nail art tutorials and inspiration\",\n    image: \"/nailart.jpg\",\n    href: \"/topics/nail-art-guides\",\n    color: \"from-purple-400 to-purple-600\"\n  },\n  {\n    title: \"Seasonal Trends\",\n    description: \"Stay updated with the latest seasonal nail trends\",\n    image: \"/nailtrendsupdated.jpg\",\n    href: \"/topics/seasonal-trends\",\n    color: \"from-nude-500 to-blush-500\",\n    trending: true\n  },\n  {\n    title: \"At-Home Nail Hacks\",\n    description: \"Professional techniques you can do at home\",\n    image: \"/athomeupdated.jpg\",\n    href: \"/topics/at-home-hacks\",\n    color: \"from-blush-500 to-purple-500\"\n  },\n  {\n    title: \"Modern Women Inspiration\",\n    description: \"Empowering nail looks for the modern woman\",\n    image: \"/modern.jpg\",\n    href: \"/topics/modern-women\",\n    color: \"from-purple-500 to-nude-500\"\n  }\n];\n\nexport default function FeaturedTopicsSection() {\n  return (\n    <section id=\"featured-topics\" className=\"py-26 bg-editorial-sand\">\n      <div className=\"max-w-content mx-auto px-6 sm:px-8 lg:px-12\">\n        {/* Header */}\n        <div className=\"max-w-3xl mb-18\">\n          <p className=\"text-overline text-editorial-accent uppercase tracking-widest mb-4 font-semibold\">\n            Explore\n          </p>\n          <h2 className=\"font-display text-display-md text-editorial-charcoal mb-6 tracking-magazine\">\n            Featured Topics\n          </h2>\n          <p className=\"text-body-lg text-editorial-slate leading-relaxed font-light\">\n            Discover everything you need to know about nails, from care basics to \n            advanced techniques and seasonal inspiration.\n          </p>\n        </div>\n        \n        {/* Topics Grid - Editorial layout */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {topics.map((topic, index) => (\n            <Link\n              key={index}\n              href={topic.href}\n              className=\"group relative overflow-hidden bg-white shadow-editorial hover:shadow-editorial-lg transition-all duration-500\"\n            >\n              {/* Trending Badge - Minimal */}\n              {topic.trending && (\n                <div className=\"absolute top-6 right-6 z-20\">\n                  <span className=\"border border-editorial-accent text-editorial-accent text-caption uppercase tracking-widest px-3 py-1 font-semibold backdrop-blur-sm bg-white/80\">\n                    Trending\n                  </span>\n                </div>\n              )}\n              \n              {/* Image Container */}\n              <div className=\"relative h-80 overflow-hidden\">\n                <img\n                  src={topic.image}\n                  alt={topic.title}\n                  className=\"w-full h-full object-cover transition-all duration-700 group-hover:scale-105\"\n                />\n                \n                {/* Subtle editorial gradient */}\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent\"></div>\n              </div>\n              \n              {/* Content */}\n              <div className=\"absolute bottom-0 left-0 right-0 p-8 text-white\">\n                <div className=\"relative z-10\">\n                  <h3 className=\"font-display text-headline-lg mb-3 text-white tracking-magazine\">\n                    {topic.title}\n                  </h3>\n                  <p className=\"text-white/90 mb-6 text-body font-sans font-light leading-relaxed\">\n                    {topic.description}\n                  </p>\n                  \n                  {/* CTA - Underline style */}\n                  <div className=\"inline-flex items-center text-white border-b border-white/50 pb-1 text-body-sm font-sans uppercase tracking-wide font-medium group-hover:border-editorial-accent group-hover:text-editorial-accent transition-all duration-300\">\n                    <span className=\"mr-2\">Explore</span>\n                    <svg \n                      className=\"w-4 h-4 transition-transform duration-300 group-hover:translate-x-1\" \n                      fill=\"none\" \n                      stroke=\"currentColor\" \n                      viewBox=\"0 0 24 24\"\n                      strokeWidth={2}\n                    >\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M17 8l4 4m0 0l-4 4m4-4H3\" />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            </Link>\n          ))}\n        </div>\n        \n        {/* Bottom CTA */}\n        <div className=\"text-center mt-18\">\n          <p className=\"text-body-lg text-editorial-slate mb-8 font-light\">\n            Ready to transform your nail game?\n          </p>\n          <Link \n            href=\"/topics\" \n            className=\"inline-flex items-center bg-editorial-charcoal text-white font-sans text-caption uppercase tracking-widest px-12 py-4 font-medium hover:bg-editorial-accent transition-all duration-500 shadow-editorial\"\n          >\n            <span className=\"mr-3\">View All Topics</span>\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" strokeWidth={2}>\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M17 8l4 4m0 0l-4 4m4-4H3\" />\n            </svg>\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n}\n"
  },
  {
    "path": "src/lib/blog.ts",
    "content": "import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport { BlogPost, BlogMetadata } from '@/types/blog';\nimport { marked } from 'marked';\n\nmarked.setOptions({\n  breaks: true,\n  gfm: true,\n});\n\nconst BLOG_DIRECTORY = path.join(process.cwd(), 'src/content/blogs');\nconst METADATA_DIRECTORY = path.join(process.cwd(), 'src/content/metadata');\n\n// \u2705 NEW - In-memory cache for metadata\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n}\n\nclass MetadataCache {\n  private cache = new Map<string, CacheEntry<any>>();\n  private readonly TTL = 3600000; // 1 hour in milliseconds\n\n  get<T>(key: string): T | null {\n    const entry = this.cache.get(key);\n    if (!entry) return null;\n\n    // Check if cache is expired\n    if (Date.now() - entry.timestamp > this.TTL) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.data as T;\n  }\n\n  set<T>(key: string, data: T): void {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n    });\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  // Get cache statistics\n  getStats() {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys()),\n    };\n  }\n}\n\n// \u2705 NEW - Global cache instance\nconst metadataCache = new MetadataCache();\n\n// \u2705 NEW - Helper to load metadata files with caching\nfunction loadMetadataFile<T>(filename: string): T {\n  const cacheKey = `metadata:${filename}`;\n  \n  // Try to get from cache first\n  const cached = metadataCache.get<T>(cacheKey);\n  if (cached) {\n    return cached;\n  }\n\n  // Load from file system\n  try {\n    const filePath = path.join(METADATA_DIRECTORY, filename);\n    const content = fs.readFileSync(filePath, 'utf8');\n    const data = JSON.parse(content) as T;\n    \n    // Store in cache\n    metadataCache.set(cacheKey, data);\n    \n    return data;\n  } catch (error) {\n    console.error(`Error loading metadata file ${filename}:`, error);\n    return {} as T;\n  }\n}\n\n// \u2705 NEW - Get metadata from JSON files\nfunction getMetadataFromJSON(slug: string): Partial<BlogMetadata> {\n  try {\n    const titles = loadMetadataFile<Record<string, string>>('titles.json');\n    const excerpts = loadMetadataFile<Record<string, string>>('excerpts.json');\n    const tags = loadMetadataFile<Record<string, string[]>>('tags.json');\n    const images = loadMetadataFile<Record<string, string>>('images.json');\n    const imageAlts = loadMetadataFile<Record<string, string>>('imageAlts.json');\n    const dateModified = loadMetadataFile<Record<string, string>>('dateModified.json');\n    const tldrs = loadMetadataFile<Record<string, { summary: string[]; keyTakeaways?: string[] }>>('tldr.json');\n    const faqs = loadMetadataFile<Record<string, any[]>>('faqItems.json');\n\n    return {\n      title: titles[slug] || undefined,           // \u2705 Return undefined if not found\n      excerpt: excerpts[slug] || undefined,\n      tags: tags[slug] || undefined,\n      image: images[slug] || undefined,\n      imageAlt: imageAlts[slug] || undefined,\n      dateModified: dateModified[slug] || undefined,\n      tldr: tldrs[slug] || undefined,            // \u2705 This will be undefined if not in JSON\n      faqItems: faqs[slug] || undefined,         // \u2705 This will be undefined if not in JSON\n    };\n  } catch (error) {\n    console.error(`Error getting metadata for ${slug}:`, error);\n    return {};\n  }\n}\n\n// \u2705 NEW - Get core metadata from frontmatter\nfunction getMetadataFromFrontmatter(slug: string): Partial<BlogMetadata> {\n  try {\n    const filePath = path.join(BLOG_DIRECTORY, `${slug}.md`);\n    const content = fs.readFileSync(filePath, 'utf8');\n    const { data } = matter(content);\n    \n    return {\n      date: data.date,\n      author: data.author,\n      readTime: data.readTime,\n      category: data.category,\n      canonical: data.canonical || `https://mirelleinspo.com/blog/${slug}`,\n\n    };\n  } catch (error) {\n    console.error(`Error reading frontmatter for ${slug}:`, error);\n    return {};\n  }\n}\n\n// \ud83d\udd04 UPDATED - getAllBlogPosts with caching\nexport async function getAllBlogPosts(): Promise<BlogMetadata[]> {\n  const cacheKey = 'all-blog-posts';\n  \n  // Try cache first\n  const cached = metadataCache.get<BlogMetadata[]>(cacheKey);\n  if (cached) {\n    return cached;\n  }\n\n  try {\n    const files = fs.readdirSync(BLOG_DIRECTORY);\n    const posts = files\n      .filter(file => file.endsWith('.md'))\n      .map(file => {\n        const slug = file.replace('.md', '');\n        \n        // \u2705 NEW - Merge JSON metadata with frontmatter\n        const jsonMetadata = getMetadataFromJSON(slug);\n        const frontmatterMetadata = getMetadataFromFrontmatter(slug);\n        \n        return {\n          slug,\n          title: jsonMetadata.title || 'Untitled',\n          excerpt: jsonMetadata.excerpt || '',\n          date: frontmatterMetadata.date || new Date().toISOString(),\n          author: frontmatterMetadata.author || 'Anonymous',\n          tags: jsonMetadata.tags || [],\n          image: jsonMetadata.image || null,\n          imageAlt: jsonMetadata.imageAlt,\n          readTime: frontmatterMetadata.readTime || '5 min',\n          category: frontmatterMetadata.category,\n          canonical: frontmatterMetadata.canonical || `https://mirelleinspo.com/blog/${slug}`,\n          dateModified: jsonMetadata.dateModified,\n          tldr: jsonMetadata.tldr,\n          faqItems: jsonMetadata.faqItems,\n        } as BlogMetadata;\n      })\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    \n    // Store in cache\n    metadataCache.set(cacheKey, posts);\n    \n    return posts;\n  } catch (error) {\n    console.error('Error reading blog posts:', error);\n    return [];\n  }\n}\n\n// \ud83d\udd04 UPDATED - getBlogPost with caching\nexport async function getBlogPost(slug: string): Promise<BlogPost | null> {\n  const cacheKey = `blog-post:${slug}`;\n  \n  // Try cache first\n  const cached = metadataCache.get<BlogPost>(cacheKey);\n  if (cached) {\n    return cached;\n  }\n\n  try {\n    const filePath = path.join(BLOG_DIRECTORY, `${slug}.md`);\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    const { data, content: markdownContent } = matter(fileContent);\n    \n    // Convert markdown to HTML\n    let htmlContent = await marked(markdownContent);\n    \n    // Add IDs to H2 headings using regex\n    htmlContent = htmlContent.replace(\n      /<h2>(.*?)<\\/h2>/g,\n      (match, text) => {\n        const cleanText = text.replace(/<[^>]*>/g, '');\n        const id = cleanText\n          .toLowerCase()\n          .replace(/[^a-z0-9]+/g, '-')\n          .replace(/^-+|-+$/g, '');\n        return `<h2 id=\"${id}\">${text}</h2>`;\n      }\n    );\n    \n    // \u2705 NEW - Merge JSON metadata\n    const jsonMetadata = getMetadataFromJSON(slug);\n    \n    const post: BlogPost = {\n      slug,\n      title: jsonMetadata.title || data.title || 'Untitled',\n      excerpt: jsonMetadata.excerpt || data.excerpt || '',\n      content: htmlContent,\n      date: data.date || new Date().toISOString(),\n      author: data.author || 'Anonymous',\n      tags: jsonMetadata.tags || data.tags || [],\n      image: jsonMetadata.image || data.image || null,\n      imageAlt: jsonMetadata.imageAlt || data.imageAlt,\n      readTime: data.readTime || '5 min',\n      category: data.category,\n      canonical: data.canonical || `https://mirelleinspo.com/blog/${slug}`,\n      dateModified: jsonMetadata.dateModified || data.dateModified,\n      tldr: jsonMetadata.tldr || data.tldr,\n      faqItems: jsonMetadata.faqItems || data.faqItems,\n    };\n    \n    // Store in cache\n    metadataCache.set(cacheKey, post);\n    \n    return post;\n  } catch (error) {\n    console.error(`Error reading blog post ${slug}:`, error);\n    return null;\n  }\n}\n\nexport async function getAllBlogSlugs(): Promise<string[]> {\n  try {\n    const files = fs.readdirSync(BLOG_DIRECTORY);\n    return files\n      .filter(file => file.endsWith('.md'))\n      .map(file => file.replace('.md', ''));\n  } catch (error) {\n    console.error('Error reading blog slugs:', error);\n    return [];\n  }\n}\n\n// \u2705 NEW - Get posts by category with caching\nexport async function getPostsByCategory(category: string): Promise<BlogMetadata[]> {\n  const cacheKey = `category:${category}`;\n  \n  const cached = metadataCache.get<BlogMetadata[]>(cacheKey);\n  if (cached) return cached;\n\n  const allPosts = await getAllBlogPosts();\n  const filtered = allPosts.filter(post => post.category === category);\n  \n  metadataCache.set(cacheKey, filtered);\n  return filtered;\n}\n\n// \u2705 NEW - Get posts by tag with caching\nexport async function getPostsByTag(tag: string): Promise<BlogMetadata[]> {\n  const cacheKey = `tag:${tag}`;\n  \n  const cached = metadataCache.get<BlogMetadata[]>(cacheKey);\n  if (cached) return cached;\n\n  const allPosts = await getAllBlogPosts();\n  const filtered = allPosts.filter(post => \n    post.tags?.some(t => t.toLowerCase() === tag.toLowerCase())\n  );\n  \n  metadataCache.set(cacheKey, filtered);\n  return filtered;\n}\n\n// \u2705 NEW - Get all categories\nexport async function getAllCategories() {\n  const allPosts = await getAllBlogPosts();\n  const categoryMap = new Map<string, number>();\n  \n  allPosts.forEach(post => {\n    if (post.category) {\n      categoryMap.set(post.category, (categoryMap.get(post.category) || 0) + 1);\n    }\n  });\n  \n  return Array.from(categoryMap.entries()).map(([name, count]) => ({\n    name,\n    slug: name.toLowerCase().replace(/\\s+/g, '-'),\n    count,\n  }));\n}\n\n// \u2705 NEW - Get all tags\nexport async function getAllTags() {\n  const allPosts = await getAllBlogPosts();\n  const tagMap = new Map<string, number>();\n  \n  allPosts.forEach(post => {\n    post.tags?.forEach(tag => {\n      tagMap.set(tag, (tagMap.get(tag) || 0) + 1);\n    });\n  });\n  \n  return Array.from(tagMap.entries())\n    .map(([name, count]) => ({\n      name,\n      slug: name.toLowerCase().replace(/\\s+/g, '-'),\n      count,\n    }))\n    .sort((a, b) => b.count - a.count);\n}\n\n// \u2705 NEW - Get related posts\nexport async function getRelatedPosts(currentSlug: string, limit: number = 3): Promise<BlogMetadata[]> {\n  const currentPost = await getBlogPost(currentSlug);\n  if (!currentPost) return [];\n  \n  const allPosts = await getAllBlogPosts();\n  \n  // Score posts by relevance\n  const scoredPosts = allPosts\n    .filter(post => post.slug !== currentSlug)\n    .map(post => {\n      let score = 0;\n      \n      // Same category = +3 points\n      if (post.category === currentPost.category) score += 3;\n      \n      // Shared tags = +1 point per tag\n      const sharedTags = post.tags?.filter(tag => \n        currentPost.tags?.includes(tag)\n      ).length || 0;\n      score += sharedTags;\n      \n      return { post, score };\n    })\n    .filter(item => item.score > 0)\n    .sort((a, b) => b.score - a.score)\n    .slice(0, limit)\n    .map(item => item.post);\n  \n  return scoredPosts;\n}\n\n// \u2705 NEW - Get paginated posts\nexport async function getPaginatedPosts(page: number = 1, perPage: number = 12): Promise<{\n  posts: BlogMetadata[];\n  totalPages: number;\n  currentPage: number;\n  totalPosts: number;\n}> {\n  const allPosts = await getAllBlogPosts();\n  const totalPosts = allPosts.length;\n  const totalPages = Math.ceil(totalPosts / perPage);\n  const startIndex = (page - 1) * perPage;\n  const endIndex = startIndex + perPage;\n  const posts = allPosts.slice(startIndex, endIndex);\n  \n  return {\n    posts,\n    totalPages,\n    currentPage: page,\n    totalPosts,\n  };\n}\n\n// \u2705 NEW - Clear cache (useful for development)\nexport function clearBlogCache() {\n  metadataCache.clear();\n}\n\n// \u2705 NEW - Get cache stats (useful for debugging)\nexport function getCacheStats() {\n  return metadataCache.getStats();\n}\n"
  },
  {
    "path": "src/types/blog.ts",
    "content": "// src/types/blog.ts\n\nimport { FAQItem, TutorialStep, TutorialMetadata, VideoMetadata } from '@/lib/generateSchemas';\n\nexport interface BlogMetadata {\n  slug: string;\n  title: string;\n  excerpt: string;\n  tags: string[];\n  image?: string;\n  imageAlt?: string;\n  dateModified?: string;\n  tldr?: {                           // \u2705 ADD THIS\n    summary: string[];\n    keyTakeaways?: string[];\n  };\n  faqItems?: FAQItem[];              // \u2705 ADD THIS\n  \n  // Optional fields for backward compatibility\n  date: string;\n  author: string;\n  readTime: number | string;\n  category?: string;\n  galleryImages?: GalleryImage[];\n  rating?: Rating;\n  canonical?: string;\n  updatedDate?: string;\n  imageWidth?: number;\n  imageHeight?: number;\n  wordCount?: number;\n}\n\n// Rest of your types...\nexport interface Category {\n  name: string;\n  slug: string;\n  description: string;\n  count: number;\n}\n\nexport interface Tag {\n  name: string;\n  slug: string;\n  count: number;\n}\n\nexport interface GalleryImage {\n  url: string;\n  alt: string;\n  width?: number;\n  height?: number;\n  caption?: string;\n}\n\nexport interface Rating {\n  value: number;\n  count: number;\n}\n\nexport interface BlogPost {\n  slug: string;\n  title: string;\n  excerpt: string;\n  content: string;\n  date: string;\n  author: string;\n  tags: string[];\n  image?: string;\n  readTime: number | string;\n  canonical: string;\n  updatedDate?: string;\n  category?: string;\n  imageAlt?: string;\n  imageWidth?: number;\n  imageHeight?: number;\n  dateModified?: string;\n  wordCount?: number;\n  faqItems?: FAQItem[];\n  tutorialSteps?: TutorialStep[];\n  tutorialMetadata?: TutorialMetadata;\n  videoMetadata?: VideoMetadata;\n  galleryImages?: GalleryImage[];\n  tldr?: {\n    summary: string[];\n    keyTakeaways?: string[];\n  };\n}\n"
  }
]
